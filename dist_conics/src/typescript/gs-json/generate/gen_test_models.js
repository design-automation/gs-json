"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const three = require("three");
const gs = require("../_export");
const ellipse_polyline = require("../conic_polyline/ellipse_polyline");
const hyperbola_polyline = require("../conic_polyline/hyperbola_polyline");
const parabola_polyline = require("../conic_polyline/parabola_polyline");
const rayTwo_polyline_1 = require("../conic_polyline/rayTwo_polyline");
const ellipse_1 = require("../conic_intersect/ellipse");
const rayTwo_1 = require("../conic_intersect/rayTwo");
const rayTwo_2 = require("../conic_intersect/rayTwo");
const rayTwo_3 = require("../conic_intersect/rayTwo");
const parabola_1 = require("../conic_intersect/parabola");
const plane3D_1 = require("../conic_intersect/plane3D");
/**
 * Generates an empty model with nothing in it.
 */
function genModelEmpty() {
    const m = new gs.Model();
    return m;
}
exports.genModelEmpty = genModelEmpty;
/**
 * Generates a model with 4 points. Two of the points have the same position.
 */
function genModelPoints() {
    const m = new gs.Model();
    m.getGeom().addPoints([
        [0, 0, 0],
        [10, 0, 0],
        [10, 10, 0],
        [0, 0, 0],
    ]);
    return m;
}
exports.genModelPoints = genModelPoints;
/**
 * Generates a model with 4 points. Two of the points have the same position.
 */
function genModelPointsInclDel() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [0, 0, 0],
        [10, 0, 0],
        [10, 10, 0],
        [30, 30, 30],
    ]);
    m.getGeom().delPoint(points[1]);
    return m;
}
exports.genModelPointsInclDel = genModelPointsInclDel;
/**
 * Generates an open polyline with three points.
 */
function genModelOpenPolyline() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [0, 0, 0],
        [10, 0, 0],
        [10, 10, 0],
    ]);
    m.getGeom().addPolyline(points, false);
    return m;
}
exports.genModelOpenPolyline = genModelOpenPolyline;
/**
 * Generates a closed polyline with six points.
 */
function genModelClosedPolyline() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [-7.931049823760986, 4.17618989944458, 0.0],
        [-5.577179908752441, -3.2098400592803955, 0.0],
        [0.898481011390686, -3.6717300415039062, 0.0],
        [7.178500175476074, -2.0277199745178223, 0.0],
        [5.293560028076172, 1.5589900016784668, 0.0],
        [7.212399959564209, 6.495269775390625, 0.0],
        [5.317729949951172, 10.390199661254883, 0.0],
    ]);
    m.getGeom().addPolyline(points, true);
    return m;
}
exports.genModelClosedPolyline = genModelClosedPolyline;
/**
 * Generates a 10 x 10 x 10 box. The box is a single polymesh.
 */
function genModelBox() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [0, 0, 0],
        [10, 0, 0],
        [10, 10, 0],
        [0, 10, 0],
        [0, 0, 10],
        [10, 0, 10],
        [10, 10, 10],
        [0, 10, 10],
    ]);
    m.getGeom().addPolymesh([
        [points[0], points[1], points[2], points[3]],
        [points[0], points[4], points[5], points[1]],
        [points[1], points[5], points[6], points[2]],
        [points[2], points[6], points[7], points[3]],
        [points[3], points[7], points[4], points[0]],
        [points[7], points[6], points[5], points[4]],
    ]);
    return m;
}
exports.genModelBox = genModelBox;
/**
 * Generates a 10 x 10 x 10 box. The box is a single polymesh.
 * The model includes the following attribs:
 * A points attribute called "height" with a number data type.
 * A face attribute called "face type" with a string data type.
 * An edge attribute called "horizontal" with a boolean data type.
 */
function genModelBoxWithAttribs() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [0, 0, 0],
        [10, 0, 0],
        [10, 10, 0],
        [0, 10, 0],
        [0, 0, 10],
        [10, 0, 10],
        [10, 10, 10],
        [0, 10, 10],
    ]);
    const box = m.getGeom().addPolymesh([
        [points[0], points[1], points[2], points[3]],
        [points[0], points[4], points[5], points[1]],
        [points[1], points[5], points[6], points[2]],
        [points[2], points[6], points[7], points[3]],
        [points[3], points[7], points[4], points[0]],
        [points[7], points[6], points[5], points[4]],
    ]);
    const height = m.addEntAttrib("height", gs.EGeomType.points, gs.EDataType.type_num);
    points.forEach((v) => v.setAttribValue(height, v.getPosition()[2]));
    const neighbours = m.addTopoAttrib("neighbours", gs.EGeomType.vertices, gs.EDataType.type_str_arr);
    const verts = gs.Arr.flatten(box.getVertices());
    for (const vert of verts) {
        const paths = [];
        for (const vert2 of vert.verticesSharedPoint()[1]) {
            if (vert2 !== vert) {
                paths.push(vert2.getTopoPathStr());
            }
        }
        vert.setAttribValue(neighbours, paths);
    }
    const face_type = m.addTopoAttrib("face_type", gs.EGeomType.faces, gs.EDataType.type_str);
    const faces = box.getFaces();
    faces[0].setAttribValue(face_type, "floor");
    faces[1].setAttribValue(face_type, "wall");
    faces[2].setAttribValue(face_type, "wall");
    faces[3].setAttribValue(face_type, "wall");
    faces[4].setAttribValue(face_type, "wall");
    faces[5].setAttribValue(face_type, "roof");
    const horizontal = m.addTopoAttrib("horizontal", gs.EGeomType.edges, gs.EDataType.type_bool);
    const horizontal_edges = [];
    horizontal_edges.push(...faces[0].getEdges());
    horizontal_edges.push(...faces[5].getEdges());
    for (const face of faces.slice(1, 5)) {
        const edges = face.getEdges();
        horizontal_edges.push(...[edges[1], edges[3]]);
    }
    horizontal_edges.forEach((v) => v.setAttribValue(horizontal, true));
    return m;
}
exports.genModelBoxWithAttribs = genModelBoxWithAttribs;
/**
 * Generates a 10 x 10 x 10 box with one open side. The box is a single polymesh.
 */
function genModelBoxOpen1() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [0, 0, 0],
        [10, 0, 0],
        [10, 10, 0],
        [0, 10, 0],
        [0, 0, 10],
        [10, 0, 10],
        [10, 10, 10],
        [0, 10, 10],
    ]);
    m.getGeom().addPolymesh([
        [points[0], points[1], points[2], points[3]],
        [points[0], points[4], points[5], points[1]],
        [points[1], points[5], points[6], points[2]],
        [points[2], points[6], points[7], points[3]],
        [points[7], points[6], points[5], points[4]],
    ]);
    return m;
}
exports.genModelBoxOpen1 = genModelBoxOpen1;
/**
 * Generates a 10 x 10 x 10 box with two open side. The box is a single polymesh.
 * The two open sides are adjacent to one another, so a single wire is generated.
 */
function genModelBoxOpen2() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [0, 0, 0],
        [10, 0, 0],
        [10, 10, 0],
        [0, 10, 0],
        [0, 0, 10],
        [10, 0, 10],
        [10, 10, 10],
        [0, 10, 10],
    ]);
    m.getGeom().addPolymesh([
        [points[0], points[1], points[2], points[3]],
        [points[0], points[4], points[5], points[1]],
        [points[1], points[5], points[6], points[2]],
        [points[7], points[6], points[5], points[4]],
    ]);
    return m;
}
exports.genModelBoxOpen2 = genModelBoxOpen2;
/**
 * Generates a 10 x 10 x 10 box with two disjoint open side. The box is a single polymesh.
 * The openings are disjoint, so two wires are generated.
 */
function genModelBoxOpen2Disjoint() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [0, 0, 0],
        [10, 0, 0],
        [10, 10, 0],
        [0, 10, 0],
        [0, 0, 10],
        [10, 0, 10],
        [10, 10, 10],
        [0, 10, 10],
    ]);
    m.getGeom().addPolymesh([
        [points[0], points[1], points[2], points[3]],
        [points[0], points[4], points[5], points[1]],
        [points[2], points[6], points[7], points[3]],
        [points[7], points[6], points[5], points[4]],
    ]);
    return m;
}
exports.genModelBoxOpen2Disjoint = genModelBoxOpen2Disjoint;
/**
 * Generates two boxes. Each box is a single polymesh.
 */
function genModelTwoBoxesOpen() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [-0.7794438004493713, -1.0, 0.0],
        [0.22055619955062866, -1.0, 0.0],
        [0.22055619955062866, -1.0, 3.0],
        [-0.7794438004493713, -1.0, 3.0],
        [-0.7794438004493713, 1.0, 0.0],
        [0.22055619955062866, 1.0, 0.0],
        [0.22055619955062866, 1.0, 3.0],
        [-0.7794438004493713, 1.0, 3.0],
        [1.3269386291503906, -1.0, 0.0],
        [2.3269386291503906, -1.0, 0.0],
        [2.3269386291503906, -1.0, 3.0],
        [1.3269386291503906, -1.0, 3.0],
        [1.3269386291503906, 1.0, 0.0],
        [2.3269386291503906, 1.0, 0.0],
        [2.3269386291503906, 1.0, 3.0],
        [1.3269386291503906, 1.0, 3.0],
    ]);
    m.getGeom().addPolymesh([
        [points[1], points[5], points[4], points[0]],
        [points[2], points[6], points[5], points[1]],
        [points[3], points[7], points[6], points[2]],
        [points[0], points[4], points[7], points[3]],
        [points[5], points[6], points[7], points[4]],
    ]);
    m.getGeom().addPolymesh([
        [points[9], points[13], points[12], points[8]],
        [points[11], points[15], points[14], points[10]],
        [points[10], points[9], points[8], points[11]],
        [points[13], points[14], points[15], points[12]],
    ]);
    return m;
}
exports.genModelTwoBoxesOpen = genModelTwoBoxesOpen;
/**
 * Generates a 10 x 10 x 10 box at [200, 500, 100]. The box is a single polymesh.
 */
function genModelBoxFarAway() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [200, 500, 100],
        [210, 500, 100],
        [210, 510, 100],
        [200, 510, 100],
        [200, 500, 120],
        [210, 500, 120],
        [210, 5010, 120],
        [200, 510, 120],
    ]);
    m.getGeom().addPolymesh([
        [points[0], points[1], points[2], points[3]],
        [points[0], points[4], points[5], points[1]],
        [points[1], points[5], points[6], points[2]],
        [points[2], points[6], points[7], points[3]],
        [points[3], points[7], points[4], points[0]],
        [points[7], points[6], points[5], points[4]],
    ]);
    return m;
}
exports.genModelBoxFarAway = genModelBoxFarAway;
/**
 * Generates many boxes
 */
function genModelManyBoxes() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let i = 0; i < 1000; i++) {
        const p0 = [Math.random(), Math.random(), 0];
        p0.map((v) => v * 1000);
        const size = [Math.random(), Math.random(), Math.random()];
        size.map((v) => v * 10);
        const p1 = [p0[0] + size[0], p0[1], p0[2]];
        const p2 = [p0[0] + size[0], p0[1] + size[1], p0[2]];
        const p3 = [p0[0], p0[1] + size[1], p0[2]];
        const p4 = [p0[0], p0[1], p0[2] + size[2]];
        const p5 = [p0[0] + size[0], p0[1], p0[2] + size[2]];
        const p6 = [p0[0] + size[0], p0[1] + size[1], p0[2] + size[2]];
        const p7 = [p0[0], p0[1] + size[1], p0[2] + size[2]];
        const points = [p0, p1, p2, p3, p4, p5, p6, p7].map((v) => g.addPoint(v));
        g.addPolymesh([
            [points[0], points[1], points[2], points[3]],
            [points[0], points[4], points[5], points[1]],
            [points[1], points[5], points[6], points[2]],
            [points[2], points[6], points[7], points[3]],
            [points[3], points[7], points[4], points[0]],
            [points[7], points[6], points[5], points[4]],
        ]);
    }
    return m;
}
exports.genModelManyBoxes = genModelManyBoxes;
/**
 * Generates a polymesh with a single polygon with difficult geometry.
 * Duplicate points.
 * Coliniear points.
 * Concave shape.
 */
function genModelDifficultPolymesh() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [0, 0, 0],
        [10, 0, 0],
        [10, 0, 0],
        [11, 0, 0],
        [12, 0, 1],
        [15, 15, 0],
        [15, 30, -1],
        [10, 30, 1],
        [10, 10, -1],
        [0, 10, 0],
        [0, 5, 0],
    ]);
    m.getGeom().addPolymesh([points]);
    return m;
}
exports.genModelDifficultPolymesh = genModelDifficultPolymesh;
/**
 * Generates an invalid polymesh with a single polygon that self intersects.
 */
function genModelInvalidPolymesh() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [0, 0, 0],
        [10, 0, 0],
        [10, 10, 0],
        [5, -5, 0],
        [0, 10, 0],
    ]);
    m.getGeom().addPolymesh([points]);
    return m;
}
exports.genModelInvalidPolymesh = genModelInvalidPolymesh;
/**
 * Generates a model with 6 polylines and two open boxes.
 */
function genModelPolyinesBoxes() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [-0.7794438004493713, -1.0, 0.0],
        [0.22055619955062866, -1.0, 0.0],
        [0.22055619955062866, -1.0, 3.0],
        [-0.7794438004493713, -1.0, 3.0],
        [-0.7794438004493713, 1.0, 0.0],
        [0.22055619955062866, 1.0, 0.0],
        [0.22055619955062866, 1.0, 3.0],
        [-0.7794438004493713, 1.0, 3.0],
        [1.3269386291503906, -1.0, 0.0],
        [2.3269386291503906, -1.0, 0.0],
        [2.3269386291503906, -1.0, 3.0],
        [1.3269386291503906, -1.0, 3.0],
        [1.3269386291503906, 1.0, 0.0],
        [2.3269386291503906, 1.0, 0.0],
        [2.3269386291503906, 1.0, 3.0],
        [1.3269386291503906, 1.0, 3.0],
        [1.4623746871948242, -2.6389076709747314, -0.31497955322265625],
        [1.4623746871948242, -2.3732826709747314, -0.31497955322265625],
        [1.4623746871948242, -2.1076576709747314, -0.31497955322265625],
        [1.5453824996948242, -1.9250404834747314, -0.31497955322265625],
        [1.5453824996948242, -2.1906654834747314, -0.31497955322265625],
        [1.5453824996948242, -2.4562904834747314, -0.31497955322265625],
        [-0.5512971878051758, -2.6389076709747314, -0.31497955322265625],
        [-0.6549032330513, -2.368194580078125, -0.31497955322265625],
        [-0.7585092782974243, -2.0974817276000977, -0.31497955322265625],
        [-0.7905550003051758, -2.194010019302368, -0.31497955322265625],
        [-0.7905550003051758, -2.4838716983795166, -0.31497955322265625],
        [-0.8672151565551758, -2.580742120742798, -0.31497955322265625],
        [-0.8672151565551758, -2.2908804416656494, -0.31497955322265625],
        [-0.8672151565551758, -2.001019239425659, -0.31497955322265625],
        [-0.7103590369224548, -2.0080180168151855, -0.31497955322265625],
        [-0.6064698696136475, -2.278623104095459, -0.31497955322265625],
        [-0.4999831020832062, -2.482268810272217, -0.31497955322265625],
        [-0.3953130841255188, -2.211965322494507, -0.31497955322265625],
        [-0.2906434237957001, -1.9416617155075073, -0.31497955322265625],
        [-0.16018390655517578, -2.073054313659668, -0.31497955322265625],
        [-0.16018390655517578, -2.3629159927368164, -0.31497955322265625],
        [-0.17405441403388977, -2.6389076709747314, -0.31497955322265625],
        [-0.24319171905517578, -2.4181833267211914, -0.31497955322265625],
        [-0.24252620339393616, -2.128326177597046, -0.31497955322265625],
        [-0.2995643615722656, -2.16054630279541, -0.31497955322265625],
        [-0.4040381610393524, -2.430924654006958, -0.31497955322265625],
        [0.6552457809448242, -2.2809975147247314, -0.31497955322265625],
        [0.5780249238014221, -2.538818597793579, -0.31497955322265625],
        [0.3367978632450104, -2.648444652557373, -0.31497955322265625],
        [0.5011316537857056, -2.5077075958251953, -0.31497955322265625],
        [0.5664176940917969, -2.2479758262634277, -0.31497955322265625],
        [0.4481579661369324, -2.014356851577759, -0.31497955322265625],
        [0.18578748404979706, -2.028092622756958, -0.31497955322265625],
        [0.0865355059504509, -2.272844076156616, -0.31497955322265625],
        [0.17117466032505035, -2.5248000621795654, -0.31497955322265625],
        [0.2941988706588745, -2.647393226623535, -0.31497955322265625],
        [0.06101566553115845, -2.522721767425537, -0.31497955322265625],
        [-0.0011052392655983567, -2.259951591491699, -0.31497955322265625],
        [0.08764392882585526, -2.006666421890259, -0.31497955322265625],
        [0.3368940055370331, -1.9140163660049438, -0.31497955322265625],
        [0.5783979296684265, -2.023050546646118, -0.31497955322265625],
        [0.8144254684448242, -1.9250404834747314, -0.31497955322265625],
        [1.102770209312439, -1.9299184083938599, -0.31497955322265625],
        [1.2849626541137695, -2.1093807220458984, -0.31497955322265625],
        [1.1502881050109863, -2.2096476554870605, -0.31497955322265625],
        [1.090009331703186, -2.001718044281006, -0.31497955322265625],
        [0.8974332809448242, -2.092536687850952, -0.31497955322265625],
        [1.0478017330169678, -2.2305264472961426, -0.31497955322265625],
        [1.0315463542938232, -2.3010170459747314, -0.31497955322265625],
        [0.8974332809448242, -2.4554409980773926, -0.31497955322265625],
        [1.0732861757278442, -2.5672106742858887, -0.31497955322265625],
        [1.208114743232727, -2.3706717491149902, -0.31497955322265625],
        [1.2719993591308594, -2.32572603225708, -0.31497955322265625],
        [1.24326753616333, -2.5858538150787354, -0.31497955322265625],
        [0.9661754369735718, -2.6389076709747314, -0.31497955322265625],
        [0.8144254684448242, -2.5021183490753174, -0.31497955322265625],
        [0.8144254684448242, -2.2135796546936035, -0.31497955322265625],
        [2.280245780944824, -1.9250404834747314, -0.31497955322265625],
        [2.280245780944824, -2.193127393722534, -0.31497955322265625],
        [2.2724032402038574, -2.460641384124756, -0.31497955322265625],
        [2.0921428203582764, -2.6389458179473877, -0.31497955322265625],
        [1.833667516708374, -2.6027204990386963, -0.31497955322265625],
        [1.7338590621948242, -2.3665759563446045, -0.31497955322265625],
        [1.7338590621948242, -2.0984888076782227, -0.31497955322265625],
        [1.8168668746948242, -1.9366711378097534, -0.31497955322265625],
        [1.8168668746948242, -2.2047581672668457, -0.31497955322265625],
        [1.8297230005264282, -2.4713997840881348, -0.31497955322265625],
        [2.054230213165283, -2.5724759101867676, -0.31497955322265625],
        [2.197237968444824, -2.378206491470337, -0.31497955322265625],
        [2.197237968444824, -2.110119342803955, -0.31497955322265625],
        [2.872042655944824, -2.4489662647247314, -0.31497955322265625],
        [2.6958096027374268, -2.6418278217315674, -0.31497955322265625],
        [2.422823905944824, -2.6069283485412598, -0.31497955322265625],
        [2.633169174194336, -2.5757405757904053, -0.31497955322265625],
        [2.77113938331604, -2.3934872150421143, -0.31497955322265625],
        [2.520369291305542, -2.2608282566070557, -0.31497955322265625],
        [2.453770875930786, -2.00935697555542, -0.31497955322265625],
        [2.7089829444885254, -1.9171342849731445, -0.31497955322265625],
        [2.7718653678894043, -2.006145715713501, -0.31497955322265625],
        [2.5197558403015137, -2.0665476322174072, -0.31497955322265625],
        [2.695028305053711, -2.251216411590576, -0.31497955322265625],
    ]);
    m.getGeom().addPolyline([16, 17, 18, 19, 20, 21].map((v, i) => points[v]), false);
    m.getGeom().addPolyline([22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41].map((v, i) => points[i]), false);
    m.getGeom().addPolyline([42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56].map((v, i) => points[i]), false);
    m.getGeom().addPolyline([57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72].map((v, i) => points[i]), false);
    m.getGeom().addPolyline([73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85].map((v, i) => points[i]), false);
    m.getGeom().addPolyline([86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96].map((v, i) => points[i]), false);
    m.getGeom().addPolymesh([[1, 5, 4, 0], [2, 6, 5, 1], [3, 7, 6, 2], [0, 4, 7, 3], [5, 6, 7, 4]].map((v, i) => v.map((v2, i2) => points[v2])));
    m.getGeom().addPolymesh([[9, 13, 12, 8], [11, 15, 14, 10], [10, 9, 8, 11], [13, 14, 15, 12]].map((v, i) => v.map((v2, i2) => points[v2])));
    return m;
}
exports.genModelPolyinesBoxes = genModelPolyinesBoxes;
/**
 * Generates a model with 6 polylines and two open boxes.
 */
function genModelGrid() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [-5.0, -5.0, 5.2243194580078125],
        [-3.8888888359069824, -5.0, 5.2243194580078125],
        [-2.777777671813965, -5.0, 5.2243194580078125],
        [-1.6666665077209473, -5.0, 5.2243194580078125],
        [-0.5555553436279297, -5.0, 5.2243194580078125],
        [0.5555558204650879, -5.0, 5.2243194580078125],
        [1.6666669845581055, -5.0, 5.2243194580078125],
        [2.777778148651123, -5.0, 5.2243194580078125],
        [3.8888893127441406, -5.0, 5.2243194580078125],
        [5.0, -5.0, 5.2243194580078125],
        [-5.0, -3.8888888359069824, 5.2243194580078125],
        [-3.8888888359069824, -3.8888888359069824, 5.2243194580078125],
        [-2.777777671813965, -3.8888888359069824, 5.2243194580078125],
        [-1.6666665077209473, -3.8888888359069824, 5.2243194580078125],
        [-0.5555553436279297, -3.8888888359069824, 5.2243194580078125],
        [0.5555558204650879, -3.8888888359069824, 5.2243194580078125],
        [1.6666669845581055, -3.8888888359069824, 5.2243194580078125],
        [2.777778148651123, -3.8888888359069824, 5.2243194580078125],
        [3.8888893127441406, -3.8888888359069824, 5.2243194580078125],
        [5.0, -3.8888888359069824, 5.2243194580078125],
        [-5.0, -2.777777671813965, 5.2243194580078125],
        [-3.8888888359069824, -2.777777671813965, 5.2243194580078125],
        [-2.777777671813965, -2.777777671813965, 5.2243194580078125],
        [-1.6666665077209473, -2.777777671813965, 5.2243194580078125],
        [-0.5555553436279297, -2.777777671813965, 5.2243194580078125],
        [0.5555558204650879, -2.777777671813965, 5.2243194580078125],
        [1.6666669845581055, -2.777777671813965, 5.2243194580078125],
        [2.777778148651123, -2.777777671813965, 5.2243194580078125],
        [3.8888893127441406, -2.777777671813965, 5.2243194580078125],
        [5.0, -2.777777671813965, 5.2243194580078125],
        [-5.0, -1.6666665077209473, 5.2243194580078125],
        [-3.8888888359069824, -1.6666665077209473, 5.2243194580078125],
        [-2.777777671813965, -1.6666665077209473, 5.2243194580078125],
        [-1.6666665077209473, -1.6666665077209473, 5.2243194580078125],
        [-0.5555553436279297, -1.6666665077209473, 5.2243194580078125],
        [0.5555558204650879, -1.6666665077209473, 5.2243194580078125],
        [1.6666669845581055, -1.6666665077209473, 5.2243194580078125],
        [2.777778148651123, -1.6666665077209473, 5.2243194580078125],
        [3.8888893127441406, -1.6666665077209473, 5.2243194580078125],
        [5.0, -1.6666665077209473, 5.2243194580078125],
        [-5.0, -0.5555553436279297, 5.2243194580078125],
        [-3.8888888359069824, -0.5555553436279297, 5.2243194580078125],
        [-2.777777671813965, -0.5555553436279297, 5.2243194580078125],
        [-1.6666665077209473, -0.5555553436279297, 5.2243194580078125],
        [-0.5555553436279297, -0.5555553436279297, 5.2243194580078125],
        [0.5555558204650879, -0.5555553436279297, 5.2243194580078125],
        [1.6666669845581055, -0.5555553436279297, 5.2243194580078125],
        [2.777778148651123, -0.5555553436279297, 5.2243194580078125],
        [3.8888893127441406, -0.5555553436279297, 5.2243194580078125],
        [5.0, -0.5555553436279297, 5.2243194580078125],
        [-5.0, 0.5555558204650879, 5.2243194580078125],
        [-3.8888888359069824, 0.5555558204650879, 5.2243194580078125],
        [-2.777777671813965, 0.5555558204650879, 5.2243194580078125],
        [-1.6666665077209473, 0.5555558204650879, 5.2243194580078125],
        [-0.5555553436279297, 0.5555558204650879, 5.2243194580078125],
        [0.5555558204650879, 0.5555558204650879, 5.2243194580078125],
        [1.6666669845581055, 0.5555558204650879, 5.2243194580078125],
        [2.777778148651123, 0.5555558204650879, 5.2243194580078125],
        [3.8888893127441406, 0.5555558204650879, 5.2243194580078125],
        [5.0, 0.5555558204650879, 5.2243194580078125],
        [-5.0, 1.6666669845581055, 5.2243194580078125],
        [-3.8888888359069824, 1.6666669845581055, 5.2243194580078125],
        [-2.777777671813965, 1.6666669845581055, 5.2243194580078125],
        [-1.6666665077209473, 1.6666669845581055, 5.2243194580078125],
        [-0.5555553436279297, 1.6666669845581055, 5.2243194580078125],
        [0.5555558204650879, 1.6666669845581055, 5.2243194580078125],
        [1.6666669845581055, 1.6666669845581055, 5.2243194580078125],
        [2.777778148651123, 1.6666669845581055, 5.2243194580078125],
        [3.8888893127441406, 1.6666669845581055, 5.2243194580078125],
        [5.0, 1.6666669845581055, 5.2243194580078125],
        [-5.0, 2.777778148651123, 5.2243194580078125],
        [-3.8888888359069824, 2.777778148651123, 5.2243194580078125],
        [-2.777777671813965, 2.777778148651123, 5.2243194580078125],
        [-1.6666665077209473, 2.777778148651123, 5.2243194580078125],
        [-0.5555553436279297, 2.777778148651123, 5.2243194580078125],
        [0.5555558204650879, 2.777778148651123, 5.2243194580078125],
        [1.6666669845581055, 2.777778148651123, 5.2243194580078125],
        [2.777778148651123, 2.777778148651123, 5.2243194580078125],
        [3.8888893127441406, 2.777778148651123, 5.2243194580078125],
        [5.0, 2.777778148651123, 5.2243194580078125],
        [-5.0, 3.8888893127441406, 5.2243194580078125],
        [-3.8888888359069824, 3.8888893127441406, 5.2243194580078125],
        [-2.777777671813965, 3.8888893127441406, 5.2243194580078125],
        [-1.6666665077209473, 3.8888893127441406, 5.2243194580078125],
        [-0.5555553436279297, 3.8888893127441406, 5.2243194580078125],
        [0.5555558204650879, 3.8888893127441406, 5.2243194580078125],
        [1.6666669845581055, 3.8888893127441406, 5.2243194580078125],
        [2.777778148651123, 3.8888893127441406, 5.2243194580078125],
        [3.8888893127441406, 3.8888893127441406, 5.2243194580078125],
        [5.0, 3.8888893127441406, 5.2243194580078125],
        [-5.0, 5.0, 5.2243194580078125],
        [-3.8888888359069824, 5.0, 5.2243194580078125],
        [-2.777777671813965, 5.0, 5.2243194580078125],
        [-1.6666665077209473, 5.0, 5.2243194580078125],
        [-0.5555553436279297, 5.0, 5.2243194580078125],
        [0.5555558204650879, 5.0, 5.2243194580078125],
        [1.6666669845581055, 5.0, 5.2243194580078125],
        [2.777778148651123, 5.0, 5.2243194580078125],
        [3.8888893127441406, 5.0, 5.2243194580078125],
        [5.0, 5.0, 5.2243194580078125],
    ]);
    m.getGeom().addPolymesh([
        [0, 1, 11, 10],
        [1, 2, 12, 11],
        [2, 3, 13, 12],
        [3, 4, 14, 13],
        [4, 5, 15, 14],
        [5, 6, 16, 15],
        [6, 7, 17, 16],
        [7, 8, 18, 17],
        [8, 9, 19, 18],
        [10, 11, 21, 20],
        [11, 12, 22, 21],
        [12, 13, 23, 22],
        [13, 14, 24, 23],
        [14, 15, 25, 24],
        [15, 16, 26, 25],
        [16, 17, 27, 26],
        [17, 18, 28, 27],
        [18, 19, 29, 28],
        [20, 21, 31, 30],
        [21, 22, 32, 31],
        [22, 23, 33, 32],
        [23, 24, 34, 33],
        [24, 25, 35, 34],
        [25, 26, 36, 35],
        [26, 27, 37, 36],
        [27, 28, 38, 37],
        [28, 29, 39, 38],
        [30, 31, 41, 40],
        [31, 32, 42, 41],
        [32, 33, 43, 42],
        [33, 34, 44, 43],
        [37, 38, 48, 47],
        [38, 39, 49, 48],
        [40, 41, 51, 50],
        [41, 42, 52, 51],
        [42, 43, 53, 52],
        [43, 44, 54, 53],
        [44, 45, 55, 54],
        [45, 46, 56, 55],
        [46, 47, 57, 56],
        [47, 48, 58, 57],
        [48, 49, 59, 58],
        [50, 51, 61, 60],
        [51, 52, 62, 61],
        [52, 53, 63, 62],
        [53, 54, 64, 63],
        [54, 55, 65, 64],
        [55, 56, 66, 65],
        [56, 57, 67, 66],
        [57, 58, 68, 67],
        [58, 59, 69, 68],
        [60, 61, 71, 70],
        [61, 62, 72, 71],
        [65, 66, 76, 75],
        [66, 67, 77, 76],
        [67, 68, 78, 77],
        [68, 69, 79, 78],
        [70, 71, 81, 80],
        [71, 72, 82, 81],
        [72, 73, 83, 82],
        [73, 74, 84, 83],
        [74, 75, 85, 84],
        [75, 76, 86, 85],
        [76, 77, 87, 86],
        [77, 78, 88, 87],
        [78, 79, 89, 88],
        [80, 81, 91, 90],
        [81, 82, 92, 91],
        [82, 83, 93, 92],
        [83, 84, 94, 93],
        [84, 85, 95, 94],
        [85, 86, 96, 95],
        [86, 87, 97, 96],
        [87, 88, 98, 97],
        [88, 89, 99, 98]
    ].map((v, i) => v.map((v2, i2) => points[v2])));
    return m;
}
exports.genModelGrid = genModelGrid;
/**
 * Generates a model of a torus with two holes in it.
 */
function genModelTorus() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [1.5, 1.1682431022563833e-06, -4.371138828673793e-08],
        [1.4488884210586548, 0.388229638338089, -4.371138828673793e-08],
        [1.2990376949310303, 0.7500008940696716, -4.371138828673793e-08],
        [1.0606595277786255, 1.0606608390808105, -4.371138828673793e-08],
        [0.7499992251396179, 1.2990385293960571, -4.371138828673793e-08],
        [0.38822782039642334, 1.448888897895813, -4.371138828673793e-08],
        [-6.97368420787825e-07, 1.5, -4.371138828673793e-08],
        [-0.3882291316986084, 1.4488885402679443, -4.371138828673793e-08],
        [-0.7500004768371582, 1.2990378141403198, -4.371138828673793e-08],
        [-1.0606608390808105, 1.060659646987915, -4.371138828673793e-08],
        [-1.2990384101867676, 0.7499994039535522, -4.371138828673793e-08],
        [-1.448888897895813, 0.3882279396057129, -4.371138828673793e-08],
        [-1.5, -5.841215511281916e-07, -4.371138828673793e-08],
        [-1.4488886594772339, -0.3882290720939636, -4.371138828673793e-08],
        [-1.2990379333496094, -0.7500003576278687, -4.371138828673793e-08],
        [-1.0606598854064941, -1.0606603622436523, -4.371138828673793e-08],
        [-0.7499997615814209, -1.299038290977478, -4.371138828673793e-08],
        [-0.3882283866405487, -1.4488887786865234, -4.371138828673793e-08],
        [1.1324685544877866e-07, -1.5, -4.371138828673793e-08],
        [0.3882285952568054, -1.4488887786865234, -4.371138828673793e-08],
        [0.7499999403953552, -1.2990381717681885, -4.371138828673793e-08],
        [1.0606601238250732, -1.0606601238250732, -4.371138828673793e-08],
        [1.299038052558899, -0.75, -4.371138828673793e-08],
        [1.4488887786865234, -0.38822856545448303, -4.371138828673793e-08],
        [1.43301260471344, 1.1160714166180696e-06, -0.25000008940696716],
        [1.384183645248413, 0.3708919882774353, -0.25000008940696716],
        [1.2410248517990112, 0.7165071368217468, -0.25000008940696716],
        [1.0132923126220703, 1.0132936239242554, -0.25000008940696716],
        [0.7165055871009827, 1.241025686264038, -0.25000008940696716],
        [0.37089022994041443, 1.3841840028762817, -0.25000008940696716],
        [-6.662251621492032e-07, 1.43301260471344, -0.25000008940696716],
        [-0.3708915114402771, 1.384183645248413, -0.25000008940696716],
        [-0.7165067195892334, 1.2410250902175903, -0.25000008940696716],
        [-1.0132935047149658, 1.0132924318313599, -0.25000008940696716],
        [-1.241025686264038, 0.7165057063102722, -0.25000008940696716],
        [-1.3841840028762817, 0.370890349149704, -0.25000008940696716],
        [-1.43301260471344, -5.580357083090348e-07, -0.25000008940696716],
        [-1.3841837644577026, -0.37089142203330994, -0.25000008940696716],
        [-1.2410250902175903, -0.7165066599845886, -0.25000008940696716],
        [-1.013292670249939, -1.0132931470870972, -0.25000008940696716],
        [-0.7165060639381409, -1.241025447845459, -0.25000008940696716],
        [-0.3708907663822174, -1.3841840028762817, -0.25000008940696716],
        [1.0818944673474107e-07, -1.43301260471344, -0.25000008940696716],
        [0.3708910048007965, -1.3841838836669922, -0.25000008940696716],
        [0.7165062427520752, -1.2410253286361694, -0.25000008940696716],
        [1.013292908668518, -1.013292908668518, -0.25000008940696716],
        [1.2410253286361694, -0.71650630235672, -0.25000008940696716],
        [1.3841838836669922, -0.37089094519615173, -0.25000008940696716],
        [1.25, 9.735358617035672e-07, -0.4330127239227295],
        [1.207406997680664, 0.32352471351623535, -0.4330127239227295],
        [1.0825313329696655, 0.6250007152557373, -0.4330127239227295],
        [0.8838829398155212, 0.883884072303772, -0.4330127239227295],
        [0.6249993443489075, 1.0825321674346924, -0.4330127239227295],
        [0.3235231637954712, 1.2074074745178223, -0.4330127239227295],
        [-5.811403411826177e-07, 1.25, -0.4330127239227295],
        [-0.3235242962837219, 1.2074071168899536, -0.4330127239227295],
        [-0.6250003576278687, 1.082531452178955, -0.4330127239227295],
        [-0.8838839530944824, 0.883882999420166, -0.4330127239227295],
        [-1.0825320482254028, 0.624999463558197, -0.4330127239227295],
        [-1.2074074745178223, 0.32352328300476074, -0.4330127239227295],
        [-1.25, -4.867679308517836e-07, -0.4330127239227295],
        [-1.2074072360992432, -0.32352420687675476, -0.4330127239227295],
        [-1.0825315713882446, -0.6250002980232239, -0.4330127239227295],
        [-0.8838832378387451, -0.8838837146759033, -0.4330127239227295],
        [-0.6249998211860657, -1.0825319290161133, -0.4330127239227295],
        [-0.3235236406326294, -1.2074073553085327, -0.4330127239227295],
        [9.437237480369731e-08, -1.25, -0.4330127239227295],
        [0.3235238492488861, -1.2074072360992432, -0.4330127239227295],
        [0.6249999403953552, -1.0825318098068237, -0.4330127239227295],
        [0.8838834762573242, -0.8838834762573242, -0.4330127239227295],
        [1.0825316905975342, -0.625, -0.4330127239227295],
        [1.2074072360992432, -0.3235238194465637, -0.4330127239227295],
        [1.0, 7.788287348375889e-07, -0.5],
        [0.9659256339073181, 0.2588197588920593, -0.5],
        [0.8660250902175903, 0.5000005960464478, -0.5],
        [0.707106351852417, 0.7071072459220886, -0.5],
        [0.4999994933605194, 0.8660256862640381, -0.5],
        [0.25881853699684143, 0.965925931930542, -0.5],
        [-4.649122899991198e-07, 1.0, -0.5],
        [-0.25881943106651306, 0.9659256935119629, -0.5],
        [-0.5000002980232239, 0.8660252094268799, -0.5],
        [-0.7071071863174438, 0.7071064114570618, -0.5],
        [-0.8660256266593933, 0.4999995827674866, -0.5],
        [-0.965925931930542, 0.2588186264038086, -0.5],
        [-1.0, -3.8941436741879443e-07, -0.5],
        [-0.9659257531166077, -0.2588193714618683, -0.5],
        [-0.8660252690315247, -0.5000002384185791, -0.5],
        [-0.7071065902709961, -0.7071069478988647, -0.5],
        [-0.49999985098838806, -0.8660255074501038, -0.5],
        [-0.25881892442703247, -0.9659258723258972, -0.5],
        [7.549790126404332e-08, -1.0, -0.5],
        [0.2588190734386444, -0.9659258127212524, -0.5],
        [0.4999999701976776, -0.866025447845459, -0.5],
        [0.7071067690849304, -0.7071067690849304, -0.5],
        [0.8660253882408142, -0.5, -0.5],
        [0.9659258127212524, -0.258819043636322, -0.5],
        [0.7500000596046448, 5.841216079716105e-07, -0.4330127239227295],
        [0.7244442701339722, 0.1941148340702057, -0.4330127239227295],
        [0.6495188474655151, 0.3750004768371582, -0.4330127239227295],
        [0.5303298234939575, 0.53033047914505, -0.4330127239227295],
        [0.37499964237213135, 0.6495193243026733, -0.4330127239227295],
        [0.19411392509937286, 0.7244445085525513, -0.4330127239227295],
        [-3.4868423881562194e-07, 0.7500000596046448, -0.4330127239227295],
        [-0.1941145956516266, 0.7244443297386169, -0.4330127239227295],
        [-0.3750002682209015, 0.6495189666748047, -0.4330127239227295],
        [-0.5303304195404053, 0.5303298234939575, -0.4330127239227295],
        [-0.6495192646980286, 0.3749997019767761, -0.4330127239227295],
        [-0.7244445085525513, 0.19411398470401764, -0.4330127239227295],
        [-0.7500000596046448, -2.9206080398580525e-07, -0.4330127239227295],
        [-0.7244443893432617, -0.194114550948143, -0.4330127239227295],
        [-0.6495190262794495, -0.3750002086162567, -0.4330127239227295],
        [-0.5303300023078918, -0.530330240726471, -0.4330127239227295],
        [-0.37499991059303284, -0.6495192050933838, -0.4330127239227295],
        [-0.19411420822143555, -0.7244444489479065, -0.4330127239227295],
        [5.662343127710301e-08, -0.7500000596046448, -0.4330127239227295],
        [0.1941143274307251, -0.7244443893432617, -0.4330127239227295],
        [0.375, -0.649519145488739, -0.4330127239227295],
        [0.5303301215171814, -0.5303301215171814, -0.4330127239227295],
        [0.6495190858840942, -0.3750000298023224, -0.4330127239227295],
        [0.7244443893432617, -0.1941142976284027, -0.4330127239227295],
        [0.5669873356819153, 4.4158602463539864e-07, -0.25000008940696716],
        [0.5476676225662231, 0.14674752950668335, -0.25000008940696716],
        [0.49102526903152466, 0.2834939956665039, -0.25000008940696716],
        [0.4009203612804413, 0.4009208679199219, -0.25000008940696716],
        [0.28349336981773376, 0.4910255968570709, -0.25000008940696716],
        [0.14674682915210724, 0.5476677417755127, -0.25000008940696716],
        [-2.6359938942732697e-07, 0.5669873356819153, -0.25000008940696716],
        [-0.14674733579158783, 0.5476676225662231, -0.25000008940696716],
        [-0.28349384665489197, 0.49102532863616943, -0.25000008940696716],
        [-0.4009208083152771, 0.40092039108276367, -0.25000008940696716],
        [-0.49102556705474854, 0.28349342942237854, -0.25000008940696716],
        [-0.5476677417755127, 0.14674688875675201, -0.25000008940696716],
        [-0.5669873356819153, -2.2079301231769932e-07, -0.25000008940696716],
        [-0.5476676821708679, -0.14674730598926544, -0.25000008940696716],
        [-0.4910253584384918, -0.2834938168525696, -0.25000008940696716],
        [-0.40092048048973083, -0.40092068910598755, -0.25000008940696716],
        [-0.2834935784339905, -0.49102550745010376, -0.25000008940696716],
        [-0.14674705266952515, -0.5476677417755127, -0.25000008940696716],
        [4.2806352240631895e-08, -0.5669873356819153, -0.25000008940696716],
        [0.1467471420764923, -0.5476676821708679, -0.25000008940696716],
        [0.28349363803863525, -0.491025447845459, -0.25000008940696716],
        [0.400920569896698, -0.400920569896698, -0.25000008940696716],
        [0.4910254180431366, -0.28349366784095764, -0.25000008940696716],
        [0.5476676821708679, -0.14674712717533112, -0.25000008940696716],
        [0.5, 3.8941436741879443e-07, -1.5099580252808664e-07],
        [0.48296281695365906, 0.12940987944602966, -1.5099580252808664e-07],
        [0.43301254510879517, 0.2500002980232239, -1.5099580252808664e-07],
        [0.3535531759262085, 0.3535536229610443, -1.5099580252808664e-07],
        [0.2499997466802597, 0.43301284313201904, -1.5099580252808664e-07],
        [0.12940926849842072, 0.482962965965271, -1.5099580252808664e-07],
        [-2.324561449995599e-07, 0.5, -1.5099580252808664e-07],
        [-0.12940971553325653, 0.48296284675598145, -1.5099580252808664e-07],
        [-0.25000014901161194, 0.43301260471343994, -1.5099580252808664e-07],
        [-0.3535535931587219, 0.3535532057285309, -1.5099580252808664e-07],
        [-0.43301281332969666, 0.2499997913837433, -1.5099580252808664e-07],
        [-0.482962965965271, 0.1294093132019043, -1.5099580252808664e-07],
        [-0.5, -1.9470718370939721e-07, -1.5099580252808664e-07],
        [-0.48296287655830383, -0.12940968573093414, -1.5099580252808664e-07],
        [-0.43301263451576233, -0.25000011920928955, -1.5099580252808664e-07],
        [-0.35355329513549805, -0.3535534739494324, -1.5099580252808664e-07],
        [-0.24999992549419403, -0.4330127537250519, -1.5099580252808664e-07],
        [-0.12940946221351624, -0.4829629361629486, -1.5099580252808664e-07],
        [3.774895063202166e-08, -0.5, -1.5099580252808664e-07],
        [0.1294095367193222, -0.4829629063606262, -1.5099580252808664e-07],
        [0.2499999850988388, -0.4330127239227295, -1.5099580252808664e-07],
        [0.3535533845424652, -0.3535533845424652, -1.5099580252808664e-07],
        [0.4330126941204071, -0.25, -1.5099580252808664e-07],
        [0.4829629063606262, -0.129409521818161, -1.5099580252808664e-07],
        [0.566987156867981, 4.415858825268515e-07, 0.24999982118606567],
        [0.5476674437522888, 0.14674748480319977, 0.24999982118606567],
        [0.49102509021759033, 0.28349390625953674, 0.24999982118606567],
        [0.40092021226882935, 0.40092071890830994, 0.24999982118606567],
        [0.2834932804107666, 0.491025447845459, 0.24999982118606567],
        [0.14674678444862366, 0.5476676225662231, 0.24999982118606567],
        [-2.635993041621987e-07, 0.566987156867981, 0.24999982118606567],
        [-0.14674729108810425, 0.5476674437522888, 0.24999982118606567],
        [-0.2834937572479248, 0.4910251796245575, 0.24999982118606567],
        [-0.40092068910598755, 0.40092024207115173, 0.24999982118606567],
        [-0.4910254180431366, 0.2834933400154114, 0.24999982118606567],
        [-0.5476676225662231, 0.14674684405326843, 0.24999982118606567],
        [-0.566987156867981, -2.2079294126342575e-07, 0.24999982118606567],
        [-0.5476675033569336, -0.14674726128578186, 0.24999982118606567],
        [-0.4910252094268799, -0.2834937274456024, 0.24999982118606567],
        [-0.4009203612804413, -0.400920569896698, 0.24999982118606567],
        [-0.2834934890270233, -0.49102532863616943, 0.24999982118606567],
        [-0.14674700796604156, -0.5476675629615784, 0.24999982118606567],
        [4.280634158249086e-08, -0.566987156867981, 0.24999982118606567],
        [0.14674709737300873, -0.5476675033569336, 0.24999982118606567],
        [0.2834935486316681, -0.49102529883384705, 0.24999982118606567],
        [0.40092045068740845, -0.40092045068740845, 0.24999982118606567],
        [0.49102526903152466, -0.2834935784339905, 0.24999982118606567],
        [0.5476675033569336, -0.14674706757068634, 0.24999982118606567],
        [0.7499997615814209, 5.841213805979351e-07, 0.43301257491111755],
        [0.7244439721107483, 0.19411475956439972, 0.43301257491111755],
        [0.649518609046936, 0.37500032782554626, 0.43301257491111755],
        [0.5303295850753784, 0.530330240726471, 0.43301257491111755],
        [0.3749994933605194, 0.6495190858840942, 0.43301257491111755],
        [0.1941138356924057, 0.7244442105293274, 0.43301257491111755],
        [-3.486840967070748e-07, 0.7499997615814209, 0.43301257491111755],
        [-0.19411450624465942, 0.7244440317153931, 0.43301257491111755],
        [-0.37500008940696716, 0.6495187282562256, 0.43301257491111755],
        [-0.530330240726471, 0.5303296446800232, 0.43301257491111755],
        [-0.6495190262794495, 0.3749995827674866, 0.43301257491111755],
        [-0.7244442105293274, 0.19411391019821167, 0.43301257491111755],
        [-0.7499997615814209, -2.9206069029896753e-07, 0.43301257491111755],
        [-0.7244440913200378, -0.19411446154117584, 0.43301257491111755],
        [-0.6495187282562256, -0.3750000596046448, 0.43301257491111755],
        [-0.5303297638893127, -0.5303300619125366, 0.43301257491111755],
        [-0.3749997615814209, -0.6495189070701599, 0.43301257491111755],
        [-0.19411413371562958, -0.7244441509246826, 0.43301257491111755],
        [5.662340640810726e-08, -0.7499997615814209, 0.43301257491111755],
        [0.19411423802375793, -0.7244441509246826, 0.43301257491111755],
        [0.37499985098838806, -0.6495189070701599, 0.43301257491111755],
        [0.5303298830986023, -0.5303298830986023, 0.43301257491111755],
        [0.6495188474655151, -0.37499988079071045, 0.43301257491111755],
        [0.7244441509246826, -0.19411422312259674, 0.43301257491111755],
        [0.9999997019767761, 7.788285074639134e-07, 0.5],
        [0.9659253358840942, 0.25881966948509216, 0.5],
        [0.8660248517990112, 0.5000004172325134, 0.5],
        [0.7071061134338379, 0.7071070075035095, 0.5],
        [0.49999934434890747, 0.866025447845459, 0.5],
        [0.25881844758987427, 0.9659256339073181, 0.5],
        [-4.6491214789057267e-07, 0.9999997019767761, 0.5],
        [-0.2588193416595459, 0.965925395488739, 0.5],
        [-0.5000001192092896, 0.8660249710083008, 0.5],
        [-0.7071069478988647, 0.7071061730384827, 0.5],
        [-0.8660253882408142, 0.49999943375587463, 0.5],
        [-0.9659256339073181, 0.25881853699684143, 0.5],
        [-0.9999997019767761, -3.894142537319567e-07, 0.5],
        [-0.9659254550933838, -0.2588192820549011, 0.5],
        [-0.8660250306129456, -0.5000000596046448, 0.5],
        [-0.707106351852417, -0.7071067094802856, 0.5],
        [-0.4999997019767761, -0.8660252690315247, 0.5],
        [-0.2588188350200653, -0.9659255743026733, 0.5],
        [7.549787994776125e-08, -0.9999997019767761, 0.5],
        [0.25881898403167725, -0.9659255146980286, 0.5],
        [0.4999998211860657, -0.8660252094268799, 0.5],
        [0.7071065306663513, -0.7071065306663513, 0.5],
        [0.8660251498222351, -0.49999985098838806, 0.5],
        [0.9659255146980286, -0.25881895422935486, 0.5],
        [1.2499996423721313, 9.735356343298918e-07, 0.43301287293434143],
        [1.2074066400527954, 0.3235245943069458, 0.43301287293434143],
        [1.0825310945510864, 0.625000536441803, 0.43301287293434143],
        [0.8838827013969421, 0.8838838338851929, 0.43301287293434143],
        [0.6249991655349731, 1.0825318098068237, 0.43301287293434143],
        [0.32352307438850403, 1.2074071168899536, 0.43301287293434143],
        [-5.811401706523611e-07, 1.2499996423721313, 0.43301287293434143],
        [-0.32352420687675476, 1.207406759262085, 0.43301287293434143],
        [-0.6250001788139343, 1.082531213760376, 0.43301287293434143],
        [-0.8838837146759033, 0.8838827610015869, 0.43301287293434143],
        [-1.0825316905975342, 0.6249992847442627, 0.43301287293434143],
        [-1.2074071168899536, 0.3235231935977936, 0.43301287293434143],
        [-1.2499996423721313, -4.867678171649459e-07, 0.43301287293434143],
        [-1.2074068784713745, -0.3235241174697876, 0.43301287293434143],
        [-1.0825313329696655, -0.6250001192092896, 0.43301287293434143],
        [-0.883882999420166, -0.8838834166526794, 0.43301287293434143],
        [-0.6249996423721313, -1.0825315713882446, 0.43301287293434143],
        [-0.32352355122566223, -1.207406997680664, 0.43301287293434143],
        [9.437234638198788e-08, -1.2499996423721313, 0.43301287293434143],
        [0.32352375984191895, -1.2074068784713745, 0.43301287293434143],
        [0.6249997615814209, -1.082531452178955, 0.43301287293434143],
        [0.8838832378387451, -0.8838832378387451, 0.43301287293434143],
        [1.082531452178955, -0.6249998211860657, 0.43301287293434143],
        [1.2074068784713745, -0.32352370023727417, 0.43301287293434143],
        [1.4330124855041504, 1.116071302931232e-06, 0.25000035762786865],
        [1.3841835260391235, 0.3708919584751129, 0.25000035762786865],
        [1.0132921934127808, 1.0132935047149658, 0.25000035762786865],
        [0.7165055274963379, 1.2410255670547485, 0.25000035762786865],
        [0.37089020013809204, 1.3841838836669922, 0.25000035762786865],
        [-6.662251053057844e-07, 1.4330124855041504, 0.25000035762786865],
        [-0.3708914816379547, 1.3841835260391235, 0.25000035762786865],
        [-0.7165066599845886, 1.2410249710083008, 0.25000035762786865],
        [-1.0132933855056763, 1.0132923126220703, 0.25000035762786865],
        [-1.2410255670547485, 0.7165056467056274, 0.25000035762786865],
        [-1.3841838836669922, 0.3708903193473816, 0.25000035762786865],
        [-1.4330124855041504, -5.58035651465616e-07, 0.25000035762786865],
        [-1.384183645248413, -0.37089139223098755, 0.25000035762786865],
        [-1.2410249710083008, -0.7165066003799438, 0.25000035762786865],
        [-1.0132925510406494, -1.0132930278778076, 0.25000035762786865],
        [-0.7165060043334961, -1.2410253286361694, 0.25000035762786865],
        [-0.370890736579895, -1.3841838836669922, 0.25000035762786865],
        [1.0818943252388635e-07, -1.4330124855041504, 0.25000035762786865],
        [0.3708909749984741, -1.3841837644577026, 0.25000035762786865],
        [0.7165061831474304, -1.2410253286361694, 0.25000035762786865],
        [1.0132927894592285, -1.0132927894592285, 0.25000035762786865],
        [1.2410252094268799, -0.7165062427520752, 0.25000035762786865],
    ]);
    m.getGeom().addPolymesh([
        [0, 1, 25, 24],
        [1, 2, 26, 25],
        [2, 3, 27, 26],
        [3, 4, 28, 27],
        [4, 5, 29, 28],
        [5, 6, 30, 29],
        [6, 7, 31, 30],
        [7, 8, 32, 31],
        [8, 9, 33, 32],
        [9, 10, 34, 33],
        [10, 11, 35, 34],
        [11, 12, 36, 35],
        [12, 13, 37, 36],
        [13, 14, 38, 37],
        [14, 15, 39, 38],
        [15, 16, 40, 39],
        [16, 17, 41, 40],
        [17, 18, 42, 41],
        [18, 19, 43, 42],
        [19, 20, 44, 43],
        [20, 21, 45, 44],
        [21, 22, 46, 45],
        [22, 23, 47, 46],
        [23, 0, 24, 47],
        [24, 25, 49, 48],
        [25, 26, 50, 49],
        [26, 27, 51, 50],
        [27, 28, 52, 51],
        [28, 29, 53, 52],
        [29, 30, 54, 53],
        [30, 31, 55, 54],
        [31, 32, 56, 55],
        [32, 33, 57, 56],
        [33, 34, 58, 57],
        [34, 35, 59, 58],
        [35, 36, 60, 59],
        [36, 37, 61, 60],
        [37, 38, 62, 61],
        [38, 39, 63, 62],
        [39, 40, 64, 63],
        [40, 41, 65, 64],
        [41, 42, 66, 65],
        [42, 43, 67, 66],
        [43, 44, 68, 67],
        [44, 45, 69, 68],
        [45, 46, 70, 69],
        [46, 47, 71, 70],
        [47, 24, 48, 71],
        [48, 49, 73, 72],
        [49, 50, 74, 73],
        [50, 51, 75, 74],
        [51, 52, 76, 75],
        [52, 53, 77, 76],
        [53, 54, 78, 77],
        [54, 55, 79, 78],
        [55, 56, 80, 79],
        [56, 57, 81, 80],
        [57, 58, 82, 81],
        [58, 59, 83, 82],
        [59, 60, 84, 83],
        [60, 61, 85, 84],
        [61, 62, 86, 85],
        [62, 63, 87, 86],
        [63, 64, 88, 87],
        [64, 65, 89, 88],
        [65, 66, 90, 89],
        [66, 67, 91, 90],
        [67, 68, 92, 91],
        [68, 69, 93, 92],
        [69, 70, 94, 93],
        [70, 71, 95, 94],
        [71, 48, 72, 95],
        [72, 73, 97, 96],
        [73, 74, 98, 97],
        [74, 75, 99, 98],
        [75, 76, 100, 99],
        [76, 77, 101, 100],
        [77, 78, 102, 101],
        [78, 79, 103, 102],
        [79, 80, 104, 103],
        [80, 81, 105, 104],
        [81, 82, 106, 105],
        [82, 83, 107, 106],
        [83, 84, 108, 107],
        [84, 85, 109, 108],
        [85, 86, 110, 109],
        [86, 87, 111, 110],
        [87, 88, 112, 111],
        [88, 89, 113, 112],
        [89, 90, 114, 113],
        [90, 91, 115, 114],
        [91, 92, 116, 115],
        [92, 93, 117, 116],
        [93, 94, 118, 117],
        [94, 95, 119, 118],
        [95, 72, 96, 119],
        [96, 97, 121, 120],
        [97, 98, 122, 121],
        [98, 99, 123, 122],
        [99, 100, 124, 123],
        [100, 101, 125, 124],
        [101, 102, 126, 125],
        [102, 103, 127, 126],
        [103, 104, 128, 127],
        [104, 105, 129, 128],
        [105, 106, 130, 129],
        [106, 107, 131, 130],
        [107, 108, 132, 131],
        [108, 109, 133, 132],
        [109, 110, 134, 133],
        [110, 111, 135, 134],
        [111, 112, 136, 135],
        [112, 113, 137, 136],
        [113, 114, 138, 137],
        [114, 115, 139, 138],
        [115, 116, 140, 139],
        [116, 117, 141, 140],
        [117, 118, 142, 141],
        [118, 119, 143, 142],
        [119, 96, 120, 143],
        [120, 121, 145, 144],
        [121, 122, 146, 145],
        [122, 123, 147, 146],
        [123, 124, 148, 147],
        [124, 125, 149, 148],
        [125, 126, 150, 149],
        [126, 127, 151, 150],
        [127, 128, 152, 151],
        [128, 129, 153, 152],
        [129, 130, 154, 153],
        [130, 131, 155, 154],
        [131, 132, 156, 155],
        [132, 133, 157, 156],
        [133, 134, 158, 157],
        [134, 135, 159, 158],
        [135, 136, 160, 159],
        [136, 137, 161, 160],
        [137, 138, 162, 161],
        [138, 139, 163, 162],
        [139, 140, 164, 163],
        [140, 141, 165, 164],
        [141, 142, 166, 165],
        [142, 143, 167, 166],
        [143, 120, 144, 167],
        [144, 145, 169, 168],
        [145, 146, 170, 169],
        [146, 147, 171, 170],
        [147, 148, 172, 171],
        [148, 149, 173, 172],
        [149, 150, 174, 173],
        [150, 151, 175, 174],
        [151, 152, 176, 175],
        [152, 153, 177, 176],
        [153, 154, 178, 177],
        [154, 155, 179, 178],
        [155, 156, 180, 179],
        [156, 157, 181, 180],
        [157, 158, 182, 181],
        [158, 159, 183, 182],
        [159, 160, 184, 183],
        [160, 161, 185, 184],
        [161, 162, 186, 185],
        [162, 163, 187, 186],
        [163, 164, 188, 187],
        [164, 165, 189, 188],
        [165, 166, 190, 189],
        [166, 167, 191, 190],
        [167, 144, 168, 191],
        [168, 169, 193, 192],
        [169, 170, 194, 193],
        [170, 171, 195, 194],
        [171, 172, 196, 195],
        [172, 173, 197, 196],
        [173, 174, 198, 197],
        [174, 175, 199, 198],
        [175, 176, 200, 199],
        [176, 177, 201, 200],
        [177, 178, 202, 201],
        [178, 179, 203, 202],
        [179, 180, 204, 203],
        [180, 181, 205, 204],
        [181, 182, 206, 205],
        [182, 183, 207, 206],
        [183, 184, 208, 207],
        [184, 185, 209, 208],
        [185, 186, 210, 209],
        [186, 187, 211, 210],
        [187, 188, 212, 211],
        [188, 189, 213, 212],
        [189, 190, 214, 213],
        [190, 191, 215, 214],
        [191, 168, 192, 215],
        [192, 193, 217, 216],
        [193, 194, 218, 217],
        [194, 195, 219, 218],
        [195, 196, 220, 219],
        [196, 197, 221, 220],
        [197, 198, 222, 221],
        [198, 199, 223, 222],
        [199, 200, 224, 223],
        [200, 201, 225, 224],
        [201, 202, 226, 225],
        [202, 203, 227, 226],
        [203, 204, 228, 227],
        [204, 205, 229, 228],
        [205, 206, 230, 229],
        [206, 207, 231, 230],
        [207, 208, 232, 231],
        [208, 209, 233, 232],
        [209, 210, 234, 233],
        [210, 211, 235, 234],
        [211, 212, 236, 235],
        [212, 213, 237, 236],
        [213, 214, 238, 237],
        [214, 215, 239, 238],
        [215, 192, 216, 239],
        [216, 217, 241, 240],
        [217, 218, 242, 241],
        [218, 219, 243, 242],
        [219, 220, 244, 243],
        [220, 221, 245, 244],
        [221, 222, 246, 245],
        [222, 223, 247, 246],
        [223, 224, 248, 247],
        [224, 225, 249, 248],
        [225, 226, 250, 249],
        [226, 227, 251, 250],
        [227, 228, 252, 251],
        [228, 229, 253, 252],
        [229, 230, 254, 253],
        [230, 231, 255, 254],
        [231, 232, 256, 255],
        [232, 233, 257, 256],
        [233, 234, 258, 257],
        [234, 235, 259, 258],
        [235, 236, 260, 259],
        [236, 237, 261, 260],
        [237, 238, 262, 261],
        [238, 239, 263, 262],
        [239, 216, 240, 263],
        [240, 241, 265, 264],
        [243, 244, 267, 266],
        [244, 245, 268, 267],
        [245, 246, 269, 268],
        [246, 247, 270, 269],
        [247, 248, 271, 270],
        [248, 249, 272, 271],
        [249, 250, 273, 272],
        [250, 251, 274, 273],
        [251, 252, 275, 274],
        [252, 253, 276, 275],
        [253, 254, 277, 276],
        [254, 255, 278, 277],
        [255, 256, 279, 278],
        [256, 257, 280, 279],
        [257, 258, 281, 280],
        [258, 259, 282, 281],
        [259, 260, 283, 282],
        [260, 261, 284, 283],
        [261, 262, 285, 284],
        [264, 265, 1, 0],
        [266, 267, 4, 3],
        [267, 268, 5, 4],
        [268, 269, 6, 5],
        [269, 270, 7, 6],
        [270, 271, 8, 7],
        [271, 272, 9, 8],
        [272, 273, 10, 9],
        [273, 274, 11, 10],
        [274, 275, 12, 11],
        [275, 276, 13, 12],
        [276, 277, 14, 13],
        [277, 278, 15, 14],
        [278, 279, 16, 15],
        [279, 280, 17, 16],
        [280, 281, 18, 17],
        [281, 282, 19, 18],
        [282, 283, 20, 19],
        [283, 284, 21, 20],
        [284, 285, 22, 21]
    ].map((v, i) => v.map((v2, i2) => points[v2])));
    return m;
}
exports.genModelTorus = genModelTorus;
/**
 * Generates a model of 50 x torus.
 */
function genModelManyTorus() {
    const m = genModelTorus();
    const g = m.getGeom();
    const o = g.getObj(0);
    for (let i = 0; i < 50; i++) {
        const matrix = new three.Matrix4();
        matrix.setPosition(new three.Vector3(Math.random() * 50, Math.random() * 50, 0));
        o.copy().xform(matrix);
    }
    return m;
}
exports.genModelManyTorus = genModelManyTorus;
/**
 * Generates a model with some circles.
 */
function genModelCircles() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [7, 33, 2],
        [10, 12, 23],
        [10, 10, -10],
    ]);
    m.getGeom().addCircle(points[0], [7, 0, 0], [0, 1, 0], [10, 20]);
    m.getGeom().addCircle(points[1], [0, 23, 0], [1, 0, 0], [30, 300]);
    m.getGeom().addCircle(points[2], [0, 0, 16], [0, 1, 0], [20, 100]);
    return m;
}
exports.genModelCircles = genModelCircles;
/**
 * Generates a model with some circles.
 */
function genModelGroups() {
    const m = new gs.Model();
    // circles
    const points1 = m.getGeom().addPoints([
        [0, 0, 10],
        [0, 0, 20],
        [0, 0, 30],
    ]);
    const c1 = m.getGeom().addCircle(points1[0], [7, 0, 0], [0, 1, 0], [10, 20]);
    const c2 = m.getGeom().addCircle(points1[1], [0, 23, 0], [1, 0, 0], [30, 300]);
    const c3 = m.getGeom().addCircle(points1[2], [0, 0, 16], [0, 1, 0], [20, 100]);
    // polylines 3d
    const points2 = [];
    for (let i = 0; i < 20; i++) {
        points2.push(m.getGeom().addPoint([Math.random() * 20, Math.random() * 20, Math.random() * 20]));
    }
    m.getGeom().addPolyline(points2, false);
    // polylines 2d
    const points3 = [];
    for (let i = 0; i < 20; i++) {
        points3.push(m.getGeom().addPoint([Math.random() * 100, Math.random() * 100, 0]));
    }
    const plines = [];
    for (let i = 0; i < 10; i++) {
        const pline_points = [];
        for (const point of points3) {
            if (Math.random() > 0.5) {
                pline_points.push(point);
            }
        }
        plines.push(m.getGeom().addPolyline(pline_points, false));
    }
    // circles group
    const group1 = m.addGroup("circles");
    group1.addObjs([c1, c2, c3]);
    // polylines group
    const group2 = m.addGroup("polylines");
    group2.setProps([["descr", "a group with some polylines"], ["dummy", 456]]);
    for (const pline of plines) {
        if (Math.random() > 0.5) {
            group2.addObj(pline);
        }
    }
    // points group
    const group3 = m.addGroup("points");
    group3.setParentGroup(group2);
    group3.setProps([["descr", "a group with some points"], ["test", 123]]);
    for (const point of points3) {
        if (Math.random() > 0.5) {
            group3.addPoint(point);
        }
    }
    // return
    return m;
}
exports.genModelGroups = genModelGroups;
/**
 * Generates a model with some planes.
 */
function genModelPlanes() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [7, 33, 2],
        [10, 12, 23],
        [10, 10, -10],
    ]);
    m.getGeom().addPlane(points[0], [7, 0, 0], [0, 1, 0]);
    m.getGeom().addPlane(points[1], [0, 23, 0], [1, 0, 0]);
    m.getGeom().addPlane(points[2], [0, 0, 16], [0, 1, 0]);
    return m;
}
exports.genModelPlanes = genModelPlanes;
/**
 * Generates a model with del points.
 */
function genModelDelPoints() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [7, 33, 2],
        [10, 12, 23],
        [10, 10, -10],
    ]);
    m.getGeom().delPoint(points[1]);
    return m;
}
exports.genModelDelPoints = genModelDelPoints;
/**
 * Generates a model with del objs.
 */
function genModelDelObjs() {
    const m = new gs.Model();
    const points = m.getGeom().addPoints([
        [-0.7794438004493713, -1.0, 0.0],
        [0.22055619955062866, -1.0, 0.0],
        [0.22055619955062866, -1.0, 3.0],
        [-0.7794438004493713, -1.0, 3.0],
        [-0.7794438004493713, 1.0, 0.0],
        [0.22055619955062866, 1.0, 0.0],
        [0.22055619955062866, 1.0, 3.0],
        [-0.7794438004493713, 1.0, 3.0],
        [1.3269386291503906, -1.0, 0.0],
        [2.3269386291503906, -1.0, 0.0],
        [2.3269386291503906, -1.0, 3.0],
        [1.3269386291503906, -1.0, 3.0],
        [1.3269386291503906, 1.0, 0.0],
        [2.3269386291503906, 1.0, 0.0],
        [2.3269386291503906, 1.0, 3.0],
        [1.3269386291503906, 1.0, 3.0],
    ]);
    const box1 = m.getGeom().addPolymesh([
        [points[1], points[5], points[4], points[0]],
        [points[2], points[6], points[5], points[1]],
        [points[3], points[7], points[6], points[2]],
        [points[0], points[4], points[7], points[3]],
        [points[5], points[6], points[7], points[4]],
    ]);
    const box2 = m.getGeom().addPolymesh([
        [points[9], points[13], points[12], points[8]],
        [points[11], points[15], points[14], points[10]],
        [points[10], points[9], points[8], points[11]],
        [points[13], points[14], points[15], points[12]],
    ]);
    m.getGeom().delObj(box1, false);
    return m;
}
exports.genModelDelObjs = genModelDelObjs;
/**
 * Generates a model with del points.
 */
function genModelObjWithAttribs() {
    const m = new gs.Model();
    const attrib_p = m.addEntAttrib("test_points", gs.EGeomType.points, gs.EDataType.type_num);
    const attrib_o = m.addEntAttrib("test_objs", gs.EGeomType.objs, gs.EDataType.type_num_arr);
    for (let i = 0; i < 10; i++) {
        for (let j = 0; j < 10; j++) {
            const points = m.getGeom().addPoints([
                [(10 * i) + (Math.random() * 10 * i), (10 * j) + (Math.random() * 10 * j), 0],
                [(10 * i) + (Math.random() * 10 * i), (10 * j) + (Math.random() * 10 * j), 0],
                [(10 * i) + (Math.random() * 10 * i), (10 * j) + (Math.random() * 10 * j), 0],
            ]);
            const pmesh = m.getGeom().addPolymesh([points]);
            pmesh.setAttribValue(attrib_o, [i, Math.random()]);
            for (const point of points) {
                point.setAttribValue(attrib_p, i);
            }
        }
    }
    return m;
}
exports.genModelObjWithAttribs = genModelObjWithAttribs;
/**
 * Generates model with a 3D Polylined Ellipse.
 */
function genModel_3DConic_Ellipse() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 10; k++) {
        const center = g.addPoint([40 * Math.random(), 40 * Math.random(), 40 * Math.random()]);
        const ellipse = m.getGeom().addEllipse(center, [10 * Math.random(), 10 * Math.random(), 10 * Math.random()], [10 * Math.random(), 10 * Math.random(), 10 * Math.random()], [360 * Math.random(), 360 * Math.random()]);
        const polyline = ellipse_polyline.ellipse_polyline_renderXYZ(ellipse);
        g.delObj(ellipse, false);
        g.delPoint(center);
    }
    // const center: gs.IPoint = g.addPoint([0,0,0]);
    // const ellipse: gs.IEllipse = m.getGeom().addEllipse(center, [4,0,0], [0,20,0], [0, 360]);
    // const polyline: gs.IPolyline = ellipse_polyline.ellipse_polyline_renderXYZ(ellipse);
    // const center2: gs.IPoint = g.addPoint([0,0,0.5]);
    // const ellipse2: gs.IEllipse = m.getGeom().addEllipse(center2, [4,0,0], [0,20,0], [0, 360]);
    // const polyline2: gs.IPolyline = ellipse_polyline.ellipse_polyline(ellipse2);
    // g.delObj(ellipse,false);
    // g.delObj(ellipse2,false);
    // g.delPoint(center);
    // g.delPoint(center2);
    return m;
}
exports.genModel_3DConic_Ellipse = genModel_3DConic_Ellipse;
/**
 * Generates model with a 3D Polylined Parabola.
 */
function genModel_3DConic_Parabola() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 10; k++) {
        const center = g.addPoint([40 * Math.random(), 40 * Math.random(), 40 * Math.random()]);
        const angle0 = 270 + 90 * Math.random();
        const angle1 = angle0 + (270 + 360 - angle0) * Math.random();
        const parabola = m.getGeom().addParabola(center, [10 * Math.random(), 10 * Math.random(), 10 * Math.random()], [10 * Math.random(), 10 * Math.random(), 10 * Math.random()], [angle0, angle1]);
        const polyline = parabola_polyline.parabola_polyline(parabola);
        g.delObj(parabola, false);
    }
    // const center: gs.IPoint = g.addPoint([0,0,0]);
    // const angle0: number = 340;
    // const angle1: number = 230;
    // const parabola: gs.IParabola = m.getGeom().addParabola(center, [10,0,0],[0,1,0],[angle0, angle1]);
    // // const polyline: gs.IPolyline = parabola_polyline.parabola_polyline(parabola);
    // const polyline: gs.IPolyline = parabola_polyline.parabola_polyline_renderXYZ(parabola);
    // g.delObj(parabola,false);
    // const center2: gs.IPoint = g.addPoint([0,0,4]);
    // const parabola2: gs.IParabola = m.getGeom().addParabola(center2, [10,0,0],[0,1,0],[angle0, angle1]);
    // const polyline2: gs.IPolyline = parabola_polyline.parabola_polyline(parabola2);
    // g.delObj(parabola2,false);
    // g.delPoint(center);
    // g.delPoint(center2);
    return m;
}
exports.genModel_3DConic_Parabola = genModel_3DConic_Parabola;
/**
 * Generates model with a 3D Polylined Hyperbola.
 */
function genModel_3DConic_Hyperbola() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 10; k++) {
        const center = g.addPoint([40 * Math.random(), 40 * Math.random(), 40 * Math.random()]);
        // const center2: gs.IPoint = g.addPoint([center.getPosition()[0]+0.5,center.getPosition()[1]+0.5,center.getPosition()[2]+0.5]);
        const t_v1 = new three.Vector3(40 * Math.random(), 40 * Math.random(), 40 * Math.random());
        const vec1 = [t_v1.x, t_v1.y, t_v1.z];
        const a = t_v1.length();
        const t_v2 = new three.Vector3(40 * Math.random(), 40 * Math.random(), 40 * Math.random());
        const vec2 = [t_v2.x, t_v2.y, t_v2.z];
        const b = t_v2.length();
        const angle_max = Math.atan(a / b) * 360 / (2 * Math.PI);
        const domain_angle0 = 360 - 2 * angle_max;
        const angle0 = (270 + angle_max + domain_angle0 * Math.random()) % 360;
        const angle0_max = (270 + angle_max) % 360;
        const angle1_max = (270 - angle_max) % 360;
        let domain_angle1;
        if (angle0 < angle1_max) {
            domain_angle1 = angle1_max - angle0;
        }
        if (angle0 > angle0_max) {
            domain_angle1 = 360 - (angle0 - angle1_max);
        }
        const angle1 = (angle0 + domain_angle1 * Math.random()) % 360;
        // const hyperbola: gs.IHyperbola = m.getGeom().addHyperbola(center, vec1, vec2, [0, 180]);
        // const hyperbola2: gs.IHyperbola = m.getGeom().addHyperbola(center2, vec1, vec2, [0, 180]);
        const hyperbola = m.getGeom().addHyperbola(center, vec1, vec2, [angle0, angle1]);
        // const hyperbola2: gs.IHyperbola = m.getGeom().addHyperbola(center2, vec1, vec2, [angle0, angle1]);
        // const hyperbola: gs.IHyperbola = m.getGeom().addHyperbola(center, vec1, vec2, [angle0_max + 0.0001, angle1_max - 0.0001]);
        // const hyperbola2: gs.IHyperbola = m.getGeom().addHyperbola(center2, vec1, vec2, [angle0_max + 0.0001, angle1_max - 0.0001]);
        const polyline = hyperbola_polyline.hyperbola_polyline(hyperbola);
        // const polyline2: gs.IPolyline = hyperbola_polyline.hyperbola_polyline_renderXYZ(hyperbola2);
        g.delObj(hyperbola, false);
        // g.delObj(hyperbola2,false);
    }
    return m;
}
exports.genModel_3DConic_Hyperbola = genModel_3DConic_Hyperbola;
/**
 * Generates model with a 3D Polylined RayTwo.
 */
function genModel_3DConic_RayTwo() {
    const m = new gs.Model();
    const g = m.getGeom();
    const origin = g.addPoint([1, 1, 1]);
    const direction = [1, 1, 1];
    const line = m.getGeom().addRayTwo(origin, direction);
    return m;
}
exports.genModel_3DConic_RayTwo = genModel_3DConic_RayTwo;
function genModel_ellipse_ellipse() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 10; k++) {
        const center1 = g.addPoint([40 * Math.random(), 40 * Math.random(), 40 * Math.random()]);
        const ellipse1 = m.getGeom().addEllipse(center1, [5 * Math.random(), 5 * Math.random(), 5 * Math.random()], [15 * Math.random(), 15 * Math.random(), 15 * Math.random()], [360 * Math.random(), 360 * Math.random()]);
        const U1 = new three.Vector3(ellipse1.getAxes()[0][0], ellipse1.getAxes()[0][1], ellipse1.getAxes()[0][2]).normalize();
        const V1 = new three.Vector3(ellipse1.getAxes()[1][0], ellipse1.getAxes()[1][1], ellipse1.getAxes()[1][2]).normalize();
        const a = ellipse1.getRadii()[0];
        const b = ellipse1.getRadii()[1];
        const center2 = g.addPoint([
            center1.getPosition()[0] + (0.5 * a) * V1.x + (0.5 * b) * U1.x,
            center1.getPosition()[1] + (0.5 * a) * V1.y + (0.5 * b) * U1.y,
            center1.getPosition()[2] + (0.5 * a) * V1.z + (0.5 * b) * U1.z
        ]);
        const ellipse2 = m.getGeom().addEllipse(center2, [b * U1.x, b * U1.y, b * U1.z], [a * V1.x, a * V1.y, a * V1.z], ellipse1.getAngles());
        const polyline1 = ellipse_polyline.ellipse_polyline_renderXYZ(ellipse1);
        const polyline2 = ellipse_polyline.ellipse_polyline_renderXYZ(ellipse2);
        const points = ellipse_1.ellipse_ellipse(ellipse1, ellipse2);
        for (const point of points) {
            g.addCircle(point, [0.2 * U1.x, 0.2 * U1.y, 0.2 * U1.z], [0.2 * V1.x, 0.2 * V1.y, 0.2 * V1.z]);
        }
        g.delObj(ellipse1, false);
        g.delPoint(center1);
        g.delObj(ellipse2, false);
        g.delPoint(center2);
    }
    return m;
}
exports.genModel_ellipse_ellipse = genModel_ellipse_ellipse;
function genModel_plane3D_ellipse2D() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 10; k++) {
        const center1 = g.addPoint([40 * Math.random(), 40 * Math.random(), 40 * Math.random()]);
        const ellipse1 = m.getGeom().addEllipse(center1, [5 * Math.random(), 5 * Math.random(), 5 * Math.random()], [15 * Math.random(), 15 * Math.random(), 15 * Math.random()], [360 * Math.random(), 360 * Math.random()]);
        const U1 = new three.Vector3(ellipse1.getAxes()[0][0], ellipse1.getAxes()[0][1], ellipse1.getAxes()[0][2]).normalize();
        const V1 = new three.Vector3(ellipse1.getAxes()[1][0], ellipse1.getAxes()[1][1], ellipse1.getAxes()[1][2]).normalize();
        const W1 = new three.Vector3(ellipse1.getAxes()[2][0], ellipse1.getAxes()[2][1], ellipse1.getAxes()[2][2]).normalize();
        const a = ellipse1.getRadii()[0];
        const b = ellipse1.getRadii()[1];
        const center2 = g.addPoint([
            center1.getPosition()[0] + (0.5 * a) * V1.x + (0.5 * b) * U1.x,
            center1.getPosition()[1] + (0.5 * a) * V1.y + (0.5 * b) * U1.y,
            center1.getPosition()[2] + (0.5 * a) * V1.z + (0.5 * b) * U1.z
        ]);
        const plane1 = g.addPlane(center2, [U1.x, U1.y, U1.z], [W1.x, W1.y, W1.z]);
        const polyline1 = ellipse_polyline.ellipse_polyline_renderXYZ(ellipse1);
        const points = plane3D_1.plane3D_ellipse2D(ellipse1, plane1);
        for (const point of points) {
            g.addCircle(point, [0.2 * U1.x, 0.2 * U1.y, 0.2 * U1.z], [0.2 * V1.x, 0.2 * V1.y, 0.2 * V1.z]);
        }
        g.delObj(ellipse1, false);
        g.delPoint(center1);
    }
    return m;
}
exports.genModel_plane3D_ellipse2D = genModel_plane3D_ellipse2D;
function genModel_plane3D_circle2D() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 1; k++) {
        // const center1: gs.IPoint = g.addPoint([40*Math.random(),40*Math.random(),40*Math.random()]);
        // const circle1: gs.ICircle = m.getGeom().addCircle(center1, [5*Math.random(),5*Math.random(),5*Math.random()],
        //                                                             [15*Math.random(),15*Math.random(),15*Math.random()],
        //                                                             [360*Math.random(), 360*Math.random()]);
        const center1 = g.addPoint([1, 1, 4]);
        const circle1 = m.getGeom().addCircle(center1, [14, 0, 0], [0, 14, 0], [110, 60]); // (display) //
        const U1 = new three.Vector3(circle1.getAxes()[0][0], circle1.getAxes()[0][1], circle1.getAxes()[0][2]).normalize();
        const V1 = new three.Vector3(circle1.getAxes()[1][0], circle1.getAxes()[1][1], circle1.getAxes()[1][2]).normalize();
        const W1 = new three.Vector3(circle1.getAxes()[2][0], circle1.getAxes()[2][1], circle1.getAxes()[2][2]).normalize();
        const a = circle1.getRadius();
        const b = circle1.getRadius();
        const center2 = g.addPoint([
            center1.getPosition()[0] + (0.5 * a) * V1.x + (0.5 * b) * U1.x,
            center1.getPosition()[1] + (0.5 * a) * V1.y + (0.5 * b) * U1.y,
            center1.getPosition()[2] + (0.5 * a) * V1.z + (0.5 * b) * U1.z
        ]);
        const plane1 = g.addPlane(center2, [U1.x, U1.y, U1.z], [W1.x, W1.y, W1.z]);
        const pointx = g.addPoint([
            center1.getPosition()[0] + (b) * U1.x,
            center1.getPosition()[1] + (b) * U1.y,
            center1.getPosition()[2] + (b) * U1.z
        ]);
        const pointy = g.addPoint([
            center1.getPosition()[0] + (a) * V1.x,
            center1.getPosition()[1] + (a) * V1.y,
            center1.getPosition()[2] + (a) * V1.z
        ]);
        const polyline1 = g.addPolyline([pointx, center1, pointy], false);
        const points = plane3D_1.plane3D_circle2D(circle1, plane1);
        for (const point of points) {
            g.addCircle(point, [0.2 * U1.x, 0.2 * U1.y, 0.2 * U1.z], [0.2 * V1.x, 0.2 * V1.y, 0.2 * V1.z]);
        }
    }
    return m;
}
exports.genModel_plane3D_circle2D = genModel_plane3D_circle2D;
function genModel_plane3D_hyperbola() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 0; k++) {
        const center1 = g.addPoint([40 * Math.random(), 40 * Math.random(), 40 * Math.random()]);
        const hyperbola1 = m.getGeom().addHyperbola(center1, [5 * Math.random(), 5 * Math.random(), 5 * Math.random()], [15 * Math.random(), 15 * Math.random(), 15 * Math.random()], [0, 360]);
        const U1 = new three.Vector3(hyperbola1.getAxes()[0][0], hyperbola1.getAxes()[0][1], hyperbola1.getAxes()[0][2]).normalize();
        const V1 = new three.Vector3(hyperbola1.getAxes()[1][0], hyperbola1.getAxes()[1][1], hyperbola1.getAxes()[1][2]).normalize();
        const W1 = new three.Vector3(hyperbola1.getAxes()[2][0], hyperbola1.getAxes()[2][1], hyperbola1.getAxes()[2][2]).normalize();
        const a = hyperbola1.getRadii()[0];
        const b = hyperbola1.getRadii()[1];
        const center2 = g.addPoint([
            center1.getPosition()[0] + (0.5 * a) * V1.x + (0.5 * b) * U1.x,
            center1.getPosition()[1] + (0.5 * a) * V1.y + (0.5 * b) * U1.y,
            center1.getPosition()[2] + (0.5 * a) * V1.z + (0.5 * b) * U1.z
        ]);
        const plane1 = g.addPlane(center2, [U1.x, U1.y, U1.z], [W1.x, W1.y, W1.z]);
        const polyline1 = hyperbola_polyline.hyperbola_polyline_renderXYZ(hyperbola1);
        const points = plane3D_1.plane3D_hyperbola(hyperbola1, plane1);
        for (const point of points) {
            g.addCircle(point, [0.2 * U1.x, 0.2 * U1.y, 0.2 * U1.z], [0.2 * V1.x, 0.2 * V1.y, 0.2 * V1.z]);
        }
        g.delObj(hyperbola1, false);
        g.delPoint(center1);
    }
    return m;
}
exports.genModel_plane3D_hyperbola = genModel_plane3D_hyperbola;
function genModel_plane3D_parabola() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 1; k++) {
        const center1 = g.addPoint([40 * Math.random(), 40 * Math.random(), 40 * Math.random()]);
        const parabola1 = m.getGeom().addParabola(center1, [5 * Math.random(), 5 * Math.random(), 5 * Math.random()], [15 * Math.random(), 15 * Math.random(), 15 * Math.random()], [80, 110]);
        const U1 = new three.Vector3(parabola1.getAxes()[0][0], parabola1.getAxes()[0][1], parabola1.getAxes()[0][2]).normalize();
        const V1 = new three.Vector3(parabola1.getAxes()[1][0], parabola1.getAxes()[1][1], parabola1.getAxes()[1][2]).normalize();
        const W1 = new three.Vector3(parabola1.getAxes()[2][0], parabola1.getAxes()[2][1], parabola1.getAxes()[2][2]).normalize();
        const p = parabola1.getRadii()[0];
        const a1 = 4 * p * Math.random();
        const a2 = 4 * p * Math.random();
        const center2 = g.addPoint([
            center1.getPosition()[0] + (a1) * U1.normalize().x + (a2) * V1.normalize().x,
            center1.getPosition()[1] + (a1) * U1.normalize().y + (a2) * V1.normalize().y,
            center1.getPosition()[2] + (a1) * U1.normalize().z + (a2) * V1.normalize().z
        ]);
        const plane1 = g.addPlane(center2, [
            (a1) * U1.normalize().x + (a2) * V1.normalize().x,
            (a1) * U1.normalize().y + (a2) * V1.normalize().y,
            (a1) * U1.normalize().z + (a2) * V1.normalize().z
        ], [
            orthoVectors(new three.Vector3((a1) * U1.x + (a2) * V1.x, (a1) * U1.y + (a2) * V1.y, (a1) * U1.z + (a2) * V1.z), W1).x,
            orthoVectors(new three.Vector3((a1) * U1.x + (a2) * V1.x, (a1) * U1.y + (a2) * V1.y, (a1) * U1.z + (a2) * V1.z), W1).y,
            orthoVectors(new three.Vector3((a1) * U1.x + (a2) * V1.x, (a1) * U1.y + (a2) * V1.y, (a1) * U1.z + (a2) * V1.z), W1).z
        ]);
        const polyline1 = parabola_polyline.parabola_polyline_renderXYZ(parabola1);
        const points = plane3D_1.plane3D_parabola(parabola1, plane1);
        if (points !== undefined) {
            for (const point of points) {
                g.addCircle(point, [0.2 * U1.x, 0.2 * U1.y, 0.2 * U1.z], [0.2 * V1.x, 0.2 * V1.y, 0.2 * V1.z]);
            }
            console.log("points" + "\n" + points.length);
        }
        console.log("Plane 3D, Parabola");
        g.delObj(parabola1, false);
        g.delPoint(center1);
    }
    return m;
}
exports.genModel_plane3D_parabola = genModel_plane3D_parabola;
function genModel_3D_Ray2_ellipse_2D() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 4; k++) {
        const ellipse = g.addEllipse(g.addPoint([40 * Math.random(), 40 * Math.random(), 40 * Math.random()]), [5 * Math.random(), 5 * Math.random(), 5 * Math.random()], [15 * Math.random(), 15 * Math.random(), 15 * Math.random()], 
        // [0, 360]);
        [360 * Math.random(), 360 * Math.random()]);
        const U1 = new three.Vector3(ellipse.getAxes()[0][0], ellipse.getAxes()[0][1], ellipse.getAxes()[0][2]).normalize();
        const V1 = new three.Vector3(ellipse.getAxes()[1][0], ellipse.getAxes()[1][1], ellipse.getAxes()[1][2]).normalize();
        const a = ellipse.getRadii()[0];
        const b = ellipse.getRadii()[1];
        const r1 = 0.5 * Math.min(a, b);
        const center_ray2 = ellipse.getOrigin();
        const t = Math.random();
        const ray2_direction = [t * U1.x + (1 - t) * V1.x,
            t * U1.y + (1 - t) * V1.y,
            t * U1.z + (1 - t) * V1.z];
        const ray2 = g.addRayTwo(center_ray2, ray2_direction);
        const polyline1 = ellipse_polyline.ellipse_polyline_renderXYZ(ellipse);
        const polyline2 = rayTwo_polyline_1.rayTwo_polyline(ray2);
        const points = rayTwo_1.rayTwo_ellipse(ray2, ellipse);
        for (const point of points) {
            g.addCircle(point, [0.2 * U1.x, 0.2 * U1.y, 0.2 * U1.z], [0.2 * V1.x, 0.2 * V1.y, 0.2 * V1.z]);
        }
    }
    return m;
}
exports.genModel_3D_Ray2_ellipse_2D = genModel_3D_Ray2_ellipse_2D;
function genModel_3D_Ray2_circle_2D() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 4; k++) {
        const circle = g.addCircle(g.addPoint([4 * Math.random(), 4 * Math.random(), 4 * Math.random()]), [5 * Math.random(), 5 * Math.random(), 5 * Math.random()], [15 * Math.random(), 15 * Math.random(), 15 * Math.random()], [0, 360]);
        // [360*Math.random(), 360*Math.random()]);
        const U1 = new three.Vector3(circle.getAxes()[0][0], circle.getAxes()[0][1], circle.getAxes()[0][2]).normalize();
        const V1 = new three.Vector3(circle.getAxes()[1][0], circle.getAxes()[1][1], circle.getAxes()[1][2]).normalize();
        const r1 = 0.5 * circle.getRadius();
        const center_ray2 = circle.getOrigin();
        const t = Math.random();
        const ray2_direction = [t * U1.x + (1 - t) * V1.x,
            t * U1.y + (1 - t) * V1.y,
            t * U1.z + (1 - t) * V1.z];
        const ray2 = g.addRayTwo(center_ray2, ray2_direction);
        // const polyline1: gs.IPolyline = circle_polyline.circle_polyline_renderXYZ(circle);
        const polyline2 = rayTwo_polyline_1.rayTwo_polyline(ray2);
        const points = rayTwo_2.rayTwo_circle(ray2, circle);
        for (const point of points) {
            g.addCircle(point, [0.2 * U1.x, 0.2 * U1.y, 0.2 * U1.z], [0.2 * V1.x, 0.2 * V1.y, 0.2 * V1.z]);
        }
    }
    return m;
}
exports.genModel_3D_Ray2_circle_2D = genModel_3D_Ray2_circle_2D;
function genModel_3D_Ray2_parabola_2D() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 4; k++) {
        const parabola = g.addParabola(g.addPoint([40 * Math.random(), 40 * Math.random(), 40 * Math.random()]), [5 * Math.random(), 5 * Math.random(), 5 * Math.random()], [15 * Math.random(), 15 * Math.random(), 15 * Math.random()], [340, 240]);
        // [360*Math.random(), 360*Math.random()]);
        const U1 = new three.Vector3(parabola.getAxes()[0][0], parabola.getAxes()[0][1], parabola.getAxes()[0][2]).normalize();
        const V1 = new three.Vector3(parabola.getAxes()[1][0], parabola.getAxes()[1][1], parabola.getAxes()[1][2]).normalize();
        const p = parabola.getRadii()[0];
        const r1 = 0.5 * p;
        const center_ray2 = parabola.getOrigin();
        const t = Math.random();
        const ray2_direction = [t * U1.x + (1 - t) * V1.x,
            t * U1.y + (1 - t) * V1.y,
            t * U1.z + (1 - t) * V1.z];
        const ray2 = g.addRayTwo(center_ray2, ray2_direction);
        const polyline1 = parabola_polyline.parabola_polyline_renderXYZ(parabola);
        const polyline2 = rayTwo_polyline_1.rayTwo_polyline(ray2);
        const points = rayTwo_3.rayTwo_parabola(ray2, parabola);
        for (const point of points) {
            g.addCircle(point, [0.2 * U1.x, 0.2 * U1.y, 0.2 * U1.z], [0.2 * V1.x, 0.2 * V1.y, 0.2 * V1.z]);
        }
    }
    return m;
}
exports.genModel_3D_Ray2_parabola_2D = genModel_3D_Ray2_parabola_2D;
function genModel_3D_Ray2_hyperbola_2D() {
    const m = new gs.Model();
    const g = m.getGeom();
    let points = [];
    while (points.length !== 2) {
        // for(let k: number = 0; k<4; k++) {
        const t_v1 = new three.Vector3(40 * Math.random(), 40 * Math.random(), 40 * Math.random());
        const vec1 = [t_v1.x, t_v1.y, t_v1.z];
        const a = t_v1.length();
        const t_v2 = new three.Vector3(40 * Math.random(), 40 * Math.random(), 40 * Math.random());
        const vec2 = [t_v2.x, t_v2.y, t_v2.z];
        const b = t_v2.length();
        const angle_max = Math.atan(a / b) * 360 / (2 * Math.PI);
        const domain_angle0 = 360 - 2 * angle_max;
        const angle0 = (270 + angle_max + domain_angle0 * Math.random()) % 360;
        const angle0_max = (270 + angle_max) % 360;
        const angle1_max = (270 - angle_max) % 360;
        let domain_angle1;
        if (angle0 < angle1_max) {
            domain_angle1 = angle1_max - angle0;
        }
        if (angle0 > angle0_max) {
            domain_angle1 = 360 - (angle0 - angle1_max);
        }
        const angle1 = (angle0 + domain_angle1 * Math.random()) % 360;
        const hyperbola = m.getGeom().addHyperbola(g.addPoint([40 * Math.random(), 40 * Math.random(), 40 * Math.random()]), vec1, vec2, [angle0, angle1]);
        const U1 = new three.Vector3(hyperbola.getAxes()[0][0], hyperbola.getAxes()[0][1], hyperbola.getAxes()[0][2]).normalize();
        const V1 = new three.Vector3(hyperbola.getAxes()[1][0], hyperbola.getAxes()[1][1], hyperbola.getAxes()[1][2]).normalize();
        const r1 = 0.5 * (0.5 * a + 0.5 * b);
        const center_ray2 = hyperbola.getOrigin();
        const t = 1;
        const ray2_direction = [t * U1.normalize().x + (1 - t) * V1.normalize().x,
            t * U1.normalize().y + (1 - t) * V1.normalize().y,
            t * U1.normalize().z + (1 - t) * V1.normalize().z];
        const ray2 = g.addRayTwo(center_ray2, ray2_direction);
        const polyline1 = parabola_polyline.parabola_polyline_renderXYZ(hyperbola);
        const polyline2 = rayTwo_polyline_1.rayTwo_polyline(ray2);
        // const points: gs.IPoint[] = rayTwo_parabola(ray2, hyperbola);
        points = rayTwo_3.rayTwo_parabola(ray2, hyperbola);
        for (const point of points) {
            g.addCircle(point, [0.2 * U1.x, 0.2 * U1.y, 0.2 * U1.z], [0.2 * V1.x, 0.2 * V1.y, 0.2 * V1.z]);
        }
        console.log("points num = " + points.length);
    }
    return m;
}
exports.genModel_3D_Ray2_hyperbola_2D = genModel_3D_Ray2_hyperbola_2D;
function genModel_3D_parabola_parabola_2D() {
    const m = new gs.Model();
    const g = m.getGeom();
    for (let k = 0; k < 1; k++) {
        const parabola1 = g.addParabola(g.addPoint([40 * Math.random(), 40 * Math.random(), 40 * Math.random()]), [5 * Math.random(), 5 * Math.random(), 5 * Math.random()], [15 * Math.random(), 15 * Math.random(), 15 * Math.random()], [340, 240]);
        // const polyline1: gs.IPolyline = parabola_polyline.parabola_polyline_renderXYZ(parabola1);
        //     // [360*Math.random(), 360*Math.random()]);
        const U1 = new three.Vector3(parabola1.getAxes()[0][0], parabola1.getAxes()[0][1], parabola1.getAxes()[0][2]).normalize();
        const V1 = new three.Vector3(parabola1.getAxes()[1][0], parabola1.getAxes()[1][1], parabola1.getAxes()[1][2]).normalize();
        // const p: number = parabola1.getRadii()[0];
        // const xyz: any[] = Arr.deepCopy(parabola1.getOrigin().getPosition());
        // const center_ray2: gs.IPoint = g.addPoint([xyz[0],xyz[1],xyz[2]]);
        // const ray2_direction: gs.XYZ = [V1.x, V1.y,V1.z];
        const parabola2 = g.addParabola(parabola1.getOrigin(), [V1.x, V1.y, V1.z], [U1.x, U1.y, U1.z], [340, 240]);
        const points = parabola_1.parabola_parabola(parabola1, parabola2);
        // const polyline2: gs.IPolyline = parabola_polyline.parabola_polyline_renderXYZ(parabola2);
        // for(let i: number = -10; i<10; i++) {
        // center_ray2.setPosition([xyz[0]+ (i/p)*U1.x,xyz[1]+(i/p)*U1.y,xyz[2]+(i/p)*U1.z]);
        // const ray2: gs.IRayTwo = g.addRayTwo(center_ray2, ray2_direction);
        // const polyline3: gs.IPolyline = rayTwo_polyline(ray2);
        // const points1: gs.IPoint[] = rayTwo_parabola(ray2, parabola1);
        // for(const point of points1) {
        //     g.addCircle(point, [0.2*U1.x,0.2*U1.y,0.2*U1.z],[0.2*V1.x,0.2*V1.y,0.2*V1.z]);
        // }
        // const points2 = rayTwo_parabola(ray2, parabola2);
        // // console.log("points 2 = " + points2);
        // let d: number = 0;
        // if( points2.length >=1 && points1.length >= 1) {
        //     switch(points2.length) {
        //         case 1: g.addCircle(points2[0], [0.2*U1.x,0.2*U1.y,0.2*U1.z],[0.2*V1.x,0.2*V1.y,0.2*V1.z]);
        //                 d = vectorFromPointsAtoB(points1[0],points2[0],false).length();
        //                 console.log("d1 = " + d);
        //                 break;
        //         case 2:
        //                 d = vectorFromPointsAtoB(points1[0],points2[0],false).length();
        //                 if( d <= vectorFromPointsAtoB(points1[0],points2[1],false).length()) {
        //                 g.addCircle(points2[0], [0.2*U1.x,0.2*U1.y,0.2*U1.z],[0.2*V1.x,0.2*V1.y,0.2*V1.z]);
        //                 console.log("d2.1 = " + d);
        //                 } else { g.addCircle(points2[1], [0.2*U1.x,0.2*U1.y,0.2*U1.z],[0.2*V1.x,0.2*V1.y,0.2*V1.z]);
        //                                     console.log("d2.2 = " + d);
        //                 }
        //                 break;
        //         default: throw new Error("check parameters");
        //     }
        // }
        // // for(const point of points2) {
        // //     g.addCircle(point, [0.2*U1.x,0.2*U1.y,0.2*U1.z],[0.2*V1.x,0.2*V1.y,0.2*V1.z]);
        // // }
        // g.delObj(ray2,true);
        // }
    }
    return m;
    // const m: gs.IModel = new gs.Model();
    // const g: gs.IGeom = m.getGeom();
    // let points: gs.IPoint[] = [];
    // for(let k: number = 0; k<1; k++) {
    // const center: gs.IPoint = g.addPoint([40*Math.random(),40*Math.random(),40*Math.random()]);
    // const angle0: number = 270 + 90*Math.random();
    // const angle1: number = angle0 + (270 + 360 - angle0)*Math.random();
    // const parabola1: gs.IParabola = m.getGeom().addParabola(center, [10*Math.random(),10*Math.random(),10*Math.random()],
    //                                                             [10*Math.random(),10*Math.random(),10*Math.random()],
    //                                                             [330, 250]);
    //                                                             // [angle0, angle1]);
    // const polyline: gs.IPolyline = parabola_polyline.parabola_polyline(parabola1);
    // // g.delObj(parabola1,false);
    // const U1: three.Vector3 = new three.Vector3(parabola1.getAxes()[0][0],
    //                                             parabola1.getAxes()[0][1],
    //                                             parabola1.getAxes()[0][2]).normalize();
    // const V1: three.Vector3 = new three.Vector3(parabola1.getAxes()[1][0],
    //                                             parabola1.getAxes()[1][1],
    //                                             parabola1.getAxes()[1][2]).normalize();
    // // points = parabola_parabola(parabola1, parabola1);
    // for(const point of points) {
    //     g.addCircle(point, [0.2*U1.x,0.2*U1.y,0.2*U1.z],[0.2*V1.x,0.2*V1.y,0.2*V1.z]);
    // }
    // }
    // console.log("points num = " + points.length);
    // return m;
}
exports.genModel_3D_parabola_parabola_2D = genModel_3D_parabola_parabola_2D;
////////////////////////////////////////////////////////////
function orthoVectors(vector1, vector2) {
    return crossVectors(vector1, vector2).cross(vector1);
}
exports.orthoVectors = orthoVectors;
function crossVectors(v1, v2, norm = false) {
    const v3 = new three.Vector3();
    v3.crossVectors(v1, v2);
    if (norm) {
        v3.normalize();
    }
    return v3;
}
exports.crossVectors = crossVectors;
const EPS = 1e-9;
function planesAreCoplanar(origin1, normal1, origin2, normal2) {
    const origin1_v = new three.Vector3(...origin1.getPosition());
    const normal1_v = new three.Vector3(...normal1).normalize();
    const origin2_v = new three.Vector3(...origin2.getPosition());
    const normal2_v = new three.Vector3(...normal2).normalize();
    const cond1 = (Math.abs(dotVectors(subVectors(origin1_v, origin2_v), normal2_v)) > EPS);
    const cond2 = (Math.abs(1 - Math.abs(normal1_v.dot(normal2_v))) > EPS);
    console.log("Math.abs(1- Math.abs(normal1_v.dot(normal2_v))) = " + Math.abs(1 - Math.abs(normal1_v.dot(normal2_v))));
    console.log("coplanar check 1 = " + cond1);
    console.log("coplanar check 2 = " + cond2);
    if (Math.abs(dotVectors(subVectors(origin1_v, origin2_v), normal2_v)) > EPS) {
        return false;
    }
    if (Math.abs(1 - Math.abs(normal1_v.dot(normal2_v))) > EPS) {
        return false;
    } // fixed bug
    return true;
}
exports.planesAreCoplanar = planesAreCoplanar;
function dotVectors(v1, v2) {
    return v1.dot(v2);
}
exports.dotVectors = dotVectors;
function subVectors(v1, v2, norm = false) {
    const v3 = new three.Vector3();
    v3.subVectors(v1, v2);
    if (norm) {
        v3.normalize();
    }
    return v3;
}
exports.subVectors = subVectors;
function vectorFromPointsAtoB(a, b, norm = false) {
    const v = subVectors(new three.Vector3(...b.getPosition()), new three.Vector3(...a.getPosition()));
    if (norm) {
        v.normalize();
    }
    return v;
}
exports.vectorFromPointsAtoB = vectorFromPointsAtoB;
//# sourceMappingURL=gen_test_models.js.map